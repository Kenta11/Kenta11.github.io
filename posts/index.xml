<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>Posts on Kenta Arai Webpage</title><link>https://Kenta11.github.io/posts/</link><description>Recent content in Posts on Kenta Arai Webpage</description><generator>Hugo -- 0.143.1</generator><language>en-us</language><lastBuildDate>Fri, 28 Apr 2023 21:30:00 +0900</lastBuildDate><atom:link href="https://Kenta11.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Vitis HLS on Ubuntu on Manjaro</title><link>https://Kenta11.github.io/posts/2023-04-27-vitis_hls-on-ubuntu-on-manjaro/</link><pubDate>Fri, 28 Apr 2023 21:30:00 +0900</pubDate><guid>https://Kenta11.github.io/posts/2023-04-27-vitis_hls-on-ubuntu-on-manjaro/</guid><description>&amp;lt;no value&amp;gt;</description><content type="text/html" mode="escaped"><![CDATA[<h2 id="はじめに">はじめに<a href="#%e3%81%af%e3%81%98%e3%82%81%e3%81%ab" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>Manjaro で Vitis HLS の<a href="https://github.com/Kenta11/Vitis-HLS-Introductory-Examples">サンプルプログラム</a>を試したところ，CSIM ができなかった．
サポートされていない Manjaro で試行錯誤するのも時間の浪費なので，Docker で Ubuntu コンテナを動かし，そこで Vitis HLS を試してみることにする．</p>
<h2 id="前提条件">前提条件<a href="#%e5%89%8d%e6%8f%90%e6%9d%a1%e4%bb%b6" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<ul>
<li>Vitis HLS をインストールしたマシン上で Docker を動作させる
<ul>
<li>Ubuntu コンテナのファイルシステムで Vitis のディレクトリをマウントし，Vitis をインストールした Ubuntu 環境を擬似的に用意する</li>
</ul>
</li>
</ul>
<h2 id="docker-上で-ubuntu-コンテナを動作させる">Docker 上で Ubuntu コンテナを動作させる<a href="#docker-%e4%b8%8a%e3%81%a7-ubuntu-%e3%82%b3%e3%83%b3%e3%83%86%e3%83%8a%e3%82%92%e5%8b%95%e4%bd%9c%e3%81%95%e3%81%9b%e3%82%8b" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>以下の Dockerfile を準備する．
<code>apt install</code> でいくつかパッケージをインストールする．
これらのパッケージは CSIM で必要になる．
また，環境変数<code>LIBRARY_PATH</code>を定義しているが，これも CSIM で必要になる．</p>
<pre tabindex="0"><code>FROM ubuntu:22.04
LABEL maintainer &#34;Kenta Arai &lt;&gt;&#34;

RUN apt update -y \
  &amp;&amp; apt dist-upgrade -y \
  &amp;&amp; apt autoremove -y \
  &amp;&amp; apt install build-essential gcc-multilib git language-pack-en libc6-dev libtinfo5 -y \
  &amp;&amp; echo &#34;export LIBRARY_PATH=/usr/lib/x86_64-linux-gnu&#34; &gt;&gt; ~/.bashrc
</code></pre><p>次に Docker イメージを作成し，コンテナを生成する．
<code>/opt</code> 下に Vitis をインストールしたディレクトリをマウントする．</p>
<pre tabindex="0"><code>$ ls
Dockerfile
$ sudo docker buildx build -t ubuntu_22.04_for_vitis .
$ sudo docker run -it --name ubuntu_22.04_for_vitis \
--mount type=bind,src=https://Kenta11.github.io/opt/Xilinx/2022.2,dst=/opt/Xilinx/2022.2,readonly \
ubuntu_22.04_for_vitis /bin/bash
</code></pre><h2 id="ubuntu-上で-vitis-hls-を動作させる">Ubuntu 上で Vitis HLS を動作させる<a href="#ubuntu-%e4%b8%8a%e3%81%a7-vitis-hls-%e3%82%92%e5%8b%95%e4%bd%9c%e3%81%95%e3%81%9b%e3%82%8b" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>Vitis HLS のサンプルプログラムをダウンロードし，<code>vitis_hls</code>で論理合成，CSIM，COSIM を開始する．</p>
<pre tabindex="0"><code># cd ~
# git clone https://github.com/Kenta11/Vitis-HLS-Introductory-Examples
# cd Vitis-HLS-Introductory-Examples/Modeling/using_vectors/
# source /opt/Xilinx/2022.2/Vivado/2022.2/settings64.sh
# vitis_hls -f run_hls.tcl
</code></pre><p>論理合成と CSIM を無事に完了することができた．
ただし COSIM は途中で終了してしまった．
以下は COSIM のログである．</p>
<pre tabindex="0"><code>****** xsim v2022.2 (64-bit)
  **** SW Build 3671981 on Fri Oct 14 04:59:54 MDT 2022
  **** IP Build 3669848 on Fri Oct 14 08:30:02 MDT 2022
    ** Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.

source xsim.dir/example/xsim_script.tcl
# xsim {example} -autoloadwcfg -tclbatch {example.tcl}
Time resolution is 1 ps
source example.tcl
## run all
////////////////////////////////////////////////////////////////////////////////////
// Inter-Transaction Progress: Completed Transaction / Total Transaction
// Intra-Transaction Progress: Measured Latency / Latency Estimation * 100%
//
// RTL Simulation : &#34;Inter-Transaction Progress&#34; [&#34;Intra-Transaction Progress&#34;] @ &#34;Simulation Time&#34;
////////////////////////////////////////////////////////////////////////////////////
// RTL Simulation : 0 / 1 [n/a] @ &#34;128000&#34;
// RTL Simulation : 1 / 1 [n/a] @ &#34;2523000&#34;
////////////////////////////////////////////////////////////////////////////////////
$finish called at time : 2552500 ps : File &#34;/root/Vitis-HLS-Introductory-Examples/Modeling/using_vectors/proj_example/solution1/sim/verilog/example.autotb.v&#34; Line 588
## quit
INFO: [Common 17-206] Exiting xsim at Fri Apr 28 12:31:04 2023...
ERROR: [COSIM 212-4] *** C/RTL co-simulation finished: FAIL ***
INFO: [COSIM 212-211] II is measurable only when transaction number is greater than 1 in RTL simulation. Otherwise, they will be marked as all NA. If user wants to calculate them, please make sure there are at least 2 transactions in RTL simulation.
INFO: [HLS 200-111] Finished Command cosim_design CPU user time: 52.13 seconds. CPU system time: 2.92 seconds. Elapsed time: 46.81 seconds; current allocated memory: 9.879 MB.
command &#39;ap_source&#39; returned error code
    while executing
&#34;source run_hls.tcl&#34;
    (&#34;uplevel&#34; body line 1)
    invoked from within
&#34;uplevel \#0 [list source $arg] &#34;

INFO: [HLS 200-112] Total CPU user time: 71.46 seconds. Total CPU system time: 4.64 seconds. Total elapsed time: 78.79 seconds; peak allocated memory: 912.445 MB.
INFO: [Common 17-206] Exiting vitis_hls at Fri Apr 28 12:31:04 2023...
</code></pre><h2 id="おわりに">おわりに<a href="#%e3%81%8a%e3%82%8f%e3%82%8a%e3%81%ab" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>Vitis HLS の CSIM は Manjaro ではできなかったが，Docker 上で動作する Ubuntu コンテナでは CSIM をすることができた．
ただし COSIM はできなかった．
公式のサンプルプログラムなので COSIM ができないということは無いと思いたい．
余力があれば原因を調べよう．</p>
]]></content></item><item><title>情報工学実験II（再々履修）</title><link>https://Kenta11.github.io/posts/2023-03-18-micro-alpha/</link><pubDate>Sat, 18 Mar 2023 19:00:00 +0900</pubDate><guid>https://Kenta11.github.io/posts/2023-03-18-micro-alpha/</guid><description>&amp;lt;no value&amp;gt;</description><content type="text/html" mode="escaped"><![CDATA[<h2 id="はじめに">はじめに<a href="#%e3%81%af%e3%81%98%e3%82%81%e3%81%ab" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>MICRO-1 の FPGA 実装をしました．
最近 SystemVerilog を書き始めたことと，HDL 開発におけるテスト手法を調べたことで，何か成果を作りたくなったためです．</p>
<h2 id="成果">成果<a href="#%e6%88%90%e6%9e%9c" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<ul>
<li><a href="https://github.com/Kenta11/micro-alpha">MICRO-alpha</a></li>
</ul>
<h2 id="micro-1-との相違点">MICRO-1 との相違点<a href="#micro-1-%e3%81%a8%e3%81%ae%e7%9b%b8%e9%81%95%e7%82%b9" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>MICRO-alpha は MICRO-1 で実行できる制御命令を全てサポートしたのですが，実際に実装するにあたって，設計の細かな部分を変更しました．</p>
<p>機械語の入出力命令はカードリーダとラインプリンタを扱うのですが，流石にそんなものは身の回りにありません．
そこで UART を使ったシリアル通信で代用しました．</p>
<p>入力命令は R0 レジスタにシリアル入力を書き込むように変更しました．
ただし入力が無い場合が想定されるので，その場合は R0 をゼロクリアします．
入力がないケースは少なくともテキストでは想定されていないので，やむを得ずこのような対処をしています．</p>
<p>出力命令は R0 レジスタをシリアル出力するように変更しました．</p>
<p>テキストでは，主記憶装置が「比較的大容量の記憶装置である」と書かれていますが，MICRO-1 の主記憶装置は現代の感覚ではかなり小さい（16bit x 64K）です．
なので FPGA 実装では Block RAM を主記憶装置に充てました．</p>
<p>また細かいところですが，制御装置の動作周波数はテキストの 20MHz ではなく 100MHz としました．
これは実装した FPGA ボードのクロック入力と同じ動作周波数にしています．</p>
<h2 id="遊び方">遊び方<a href="#%e9%81%8a%e3%81%b3%e6%96%b9" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p><strong>（追記）v1.1.4 から CLI 上で Vivado プロジェクトを作成できるようにしました． v1.1.4 で遊ぶ場合は「Vivado プロジェクトを作成（v1.1.4 以降）」を参照してください．</strong></p>
<h3 id="vivado-プロジェクトを作成v114-以前">Vivado プロジェクトを作成（v1.1.4 以前）<a href="#vivado-%e3%83%97%e3%83%ad%e3%82%b8%e3%82%a7%e3%82%af%e3%83%88%e3%82%92%e4%bd%9c%e6%88%90v114-%e4%bb%a5%e5%89%8d" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<p><a href="../2022-09-23-micro1">以前の記事</a>で紹介したツールをインストールしたマシンで回路合成します．
<a href="https://github.com/Kenta11/micro-alpha">MICRO-alpha</a>のリポジトリをクローンして，そのディレクトリ内にて<a href="https://github.com/Kenta11/micro-alpha/releases/tag/v1.0.0">リリースのページ</a>で公開している Vivado プロジェクト (micro-alpha-arty-a7-100.tar.gz) を解凍します．</p>
<pre tabindex="0"><code>$ git clone https://github.com/Kenta11/micro-alpha
$ cd micro-alpha
$ wget https://github.com/Kenta11/micro-alpha/releases/download/v1.0.0/micro-alpha-arty-a7-100.tar.gz
$ tar zxvf micro-alpha-arty-a7-100.tar.gz
$ tree -L 1
.
├── LICENSE
├── Makefile
├── README.md
├── micro-alpha-arty-a7-100.tar.gz
├── run.py
├── micro-alpha
├── script
├── src
├── tb
</code></pre><p>マイクロプログラムを制御記憶に書き込むための COE ファイルを作成します．</p>
<pre tabindex="0"><code>$ curl -s http://www.ced.is.utsunomiya-u.ac.jp/lecture/2022/jikkenb/micro/chap5/MICROONE | iconv -f sjis -t utf8 | tr -d &#34;\32&#34; &gt; MICROONE
$ rm1masm MICROONE -o MICROONE.o
$ python script/obj2coe.py MICROONE.o micro-alpha/micro-alpha.srcs/sources_1/ip/control_memory/control_program.coe
</code></pre><p>続いて機械語プログラムを制御記憶に書き込むための COE ファイルを作成します．</p>
<pre tabindex="0"><code>$ cat calculator 
; This program is distributed under MIT LICENSE.
; Copyright (c) 2023 Kenta Arai

; 逆ポーランド記法電卓プログラム
; 
; 実行例（(3+4)*(4-2)）
; (CALCULATOR)&gt;&gt; 3 4 + 4 2 - *
; 14
TITLE CALCULATOR
             ORG  140
CALCULATOR0: LA   1, PROMPT
             BSR  PRINT
             LA   1, INPUT
             BSR  RWLINE
             LA   0, INPUT
             BSR  INTERPRET
             BSR  PUTINT
             B    CALCULATOR0
             HLT

; データ領域
PROMPT:      DC   &#39; (
             DC   &#39; c
             DC   &#39; a
             DC   &#39; l
             DC   &#39; c
             DC   &#39; )
             DC   &#39; &gt;
             DC   &#39; &gt;
             DC   &#39;  
             DC   0
INPUT:       DS   32

; 文字列を出力装置に書き込む関数
; 入力: {r1: 文字列の先頭アドレス}
; 出力: なし
PRINT0:      WIO  LPT
             LEA  1, 1(1)
PRINT:       LX   0, (1)
             OR   0, (0)
             BNZ  PRINT0
             RET

; 入力装置から行を読む関数
; 入力: {r1: 行の書込み先アドレス}
; 出力: なし
; NOTE: 読んだ文字は都度出力装置に書き込む
RWLINE0:     STX  0, (1)
             LEA  1, 1(1)
RWLINE:      BSR  READWORD
             WIO  LPT
             LC   2, X&#34;0D
             CMP  0, (2)
             BNZ  RWLINE0
             WIO  LPT
             LC   0, X&#34;0A
             WIO  LPT
             LC   0, 0
             STX  0, (1)
             RET

; 入力式を計算する
; 入力: {r0: 入力文字列}
; 出力: {r1: 計算結果}
INTERPRET:   LX   1, (0)
             CMP  1, 0       ; NULL
             BZ   INTERPRET5
             CMP  1, X&#34;20    ; SP
             BZ   INTERPRET4
             CMP  1, X&#34;2B    ; +
             BNZ  INTERPRET0
             POP  3, 2
             ADD  2, (3)
             PUSH 2, 1
             B    INTERPRET4
INTERPRET0:  CMP  1, X&#34;2D    ; -
             BNZ  INTERPRET1
             POP  3, 2
             SUB  2, (3)
             PUSH 2, 1
             B    INTERPRET4
INTERPRET1:  CMP  1, X&#34;2A    ; *
             BNZ  INTERPRET2
             POP  3, 1
             POP  1, 1
             MULT 1, (3)
             PUSH 2, 1
             B    INTERPRET4
INTERPRET2:  CMP  1, X&#34;2F    ; /
             BNZ  INTERPRET3
             POP  3, 2
             LC   1, 0
             DIV  1, (3)
             PUSH 2, 1
             B    INTERPRET4
INTERPRET3:  BSR  ISDIGIT    ; &#39;0&#39;-&#39;9&#39;
             CMP  1, 0
             BZ   INTERPRET6
             BSR  ATOI
             PUSH 1, 1
INTERPRET4:  ADD  0, 1
             B    INTERPRET
INTERPRET5:  POP  1, 1
INTERPRET6:  RET

; 整数を出力装置に書き込む関数
; 入力: {r1: 数値}
; 出力: なし
PUTINT:      LC   0, X&#34;30
             WIO  LPT
             LC   0, X&#34;78
             WIO  LPT
             LEA  2, (1)    ; r1[15:12] を出���
             SC   2, 4
             AND  2, X&#34;F
             LA   3, DIGIT
             ADD  2, (3)
             LX   0, (2)
             WIO  LPT
             LEA  2, (1)    ; r1[11:8] を出力
             SC   2, 8
             AND  2, X&#34;F
             LA   3, DIGIT
             ADD  2, (3)
             LX   0, (2)
             WIO  LPT
             LEA  2, (1)    ; r1[7:4] を出力
             SC   2, 12
             AND  2, X&#34;F
             LA   3, DIGIT
             ADD  2, (3)
             LX   0, (2)
             WIO  LPT
             LEA  2, (1)    ; r1[3:0] を出力
             AND  2, X&#34;F
             LA   3, DIGIT
             ADD  2, (3)
             LX   0, (2)
             WIO  LPT
             LC   0, X&#34;0D
             WIO  LPT
             LC   0, X&#34;0A
             WIO  LPT
             RET
DIGIT:       DC   X&#34;30
             DC   X&#34;31
             DC   X&#34;32
             DC   X&#34;33
             DC   X&#34;34
             DC   X&#34;35
             DC   X&#34;36
             DC   X&#34;37
             DC   X&#34;38
             DC   X&#34;39
             DC   X&#34;41
             DC   X&#34;42
             DC   X&#34;43
             DC   X&#34;44
             DC   X&#34;45
             DC   X&#34;46

; 入力装置から文字を読む関数
; 入力: なし
; 出力: {r0: 読んだ文字}
; NOTE: MICRO-alpha は入力が無い場合にヌル文字を読んだ扱いとする
;       この関数はヌル文字以外を読むまで，入力装置から文字を読み続ける
READWORD:    RIO  CR
             OR   0, (0)
             BZ   READWORD
             RET

; 入力文字列を数値に変換する
; 入力: {r0: 入力文字列}
; 出力: {r0: 入力文字列(読み進めたアドレス), r1: 変換後の数値}
ATOI:        LC   1, 0
ATOI0:       PUSH 1, 1
             LX   1, (0)
             BSR  ISDIGIT
             CMP  1, 0
             POP  1, 1
             BNZ  ATOI1
             RET
ATOI1:       MULT 1, 10
             LX   1, (0)
             SUB  1, X&#34;30
             ADD  1, (2)
             ADD  0, 1
             B    ATOI0

; 入力文字が数字(&#39;0&#39;-&#39;9&#39;)であるかを判定する
; 入力: {r1: 入力文字}
; 出力: {r1: 判定結果(1: 数字である，0: 数字でない)}
ISDIGIT:     CMP  1, X&#34;30
             BM   ISDIGIT0
             CMP  1, X&#34;39
             BP   ISDIGIT0
             LC   1, 1
             RET
ISDIGIT0:    LC   1, 0
             RET
END
$ rm1asm calculator -o calculator.b
$ python script/obj2coe.py calculator.b micro-alpha/micro-alpha.srcs/sources_1/ip/main_memory/machine_program.coe
</code></pre><h3 id="vivado-プロジェクトを作成v114-以降">Vivado プロジェクトを作成（v1.1.4 以降）<a href="#vivado-%e3%83%97%e3%83%ad%e3%82%b8%e3%82%a7%e3%82%af%e3%83%88%e3%82%92%e4%bd%9c%e6%88%90v114-%e4%bb%a5%e9%99%8d" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<ul>
<li><strong>注意：Basys 3 で動かす場合は以下のように読み替えてください</strong>
<ul>
<li><code>fpga/arty-a7-100/</code> -&gt; <code>fpga/basys-3/</code></li>
<li>Makefile の変数 <code>SCRIPT</code> を Basys3 用に切り替える</li>
</ul>
</li>
</ul>
<p><a href="../2022-09-23-micro1">以前の記事</a>で紹介したツールをインストールしたマシンで回路合成します．
<a href="https://github.com/Kenta11/micro-alpha">MICRO-alpha</a>のリポジトリをクローンしてください．</p>
<pre tabindex="0"><code>$ git clone https://github.com/Kenta11/micro-alpha
$ cd micro-alpha
$ tree -L 1
.
├── LICENSE
├── Makefile
├── README.md
├── fpga
├── script
├── src
└── tb

5 directories, 3 files
</code></pre><p>マイクロプログラムを制御記憶に書き込むための COE ファイルを作成します．</p>
<pre tabindex="0"><code>$ curl -s http://www.ced.is.utsunomiya-u.ac.jp/lecture/2022/jikkenb/micro/chap5/MICROONE | iconv -f sjis -t utf8 | tr -d &#34;\32&#34; &gt; MICROONE
$ rm1masm MICROONE -o MICROONE.o
$ python script/obj2coe.py arty-a7-100 MICROONE.o fpga/arty-a7-100/control_program.coe
</code></pre><p>続いて，機械語プログラムを主記憶に書き込むための COE ファイルを作成します．</p>
<pre tabindex="0"><code>$ cat calculator 
; This program is distributed under MIT LICENSE.
; Copyright (c) 2023 Kenta Arai

; 逆ポーランド記法電卓プログラム
; 
; 実行例（(3+4)*(4-2)）
; (CALCULATOR)&gt;&gt; 3 4 + 4 2 - *
; 14
TITLE CALCULATOR
             ORG  140
CALCULATOR0: LA   1, PROMPT
             BSR  PRINT
             LA   1, INPUT
             BSR  RWLINE
             LA   0, INPUT
             BSR  INTERPRET
             BSR  PUTINT
             B    CALCULATOR0
             HLT

; データ領域
PROMPT:      DC   &#39; (
             DC   &#39; c
             DC   &#39; a
             DC   &#39; l
             DC   &#39; c
             DC   &#39; )
             DC   &#39; &gt;
             DC   &#39; &gt;
             DC   &#39;  
             DC   0
INPUT:       DS   32

; 文字列を出力装置に書き込む関数
; 入力: {r1: 文字列の先頭アドレス}
; 出力: なし
PRINT0:      WIO  LPT
             LEA  1, 1(1)
PRINT:       LX   0, (1)
             OR   0, (0)
             BNZ  PRINT0
             RET

; 入力装置から行を読む関数
; 入力: {r1: 行の書込み先アドレス}
; 出力: なし
; NOTE: 読んだ文字は都度出力装置に書き込む
RWLINE0:     STX  0, (1)
             LEA  1, 1(1)
RWLINE:      BSR  READWORD
             WIO  LPT
             LC   2, X&#34;0D
             CMP  0, (2)
             BNZ  RWLINE0
             WIO  LPT
             LC   0, X&#34;0A
             WIO  LPT
             LC   0, 0
             STX  0, (1)
             RET

; 入力式を計算する
; 入力: {r0: 入力文字列}
; 出力: {r1: 計算結果}
INTERPRET:   LX   1, (0)
             CMP  1, 0       ; NULL
             BZ   INTERPRET5
             CMP  1, X&#34;20    ; SP
             BZ   INTERPRET4
             CMP  1, X&#34;2B    ; +
             BNZ  INTERPRET0
             POP  3, 2
             ADD  2, (3)
             PUSH 2, 1
             B    INTERPRET4
INTERPRET0:  CMP  1, X&#34;2D    ; -
             BNZ  INTERPRET1
             POP  3, 2
             SUB  2, (3)
             PUSH 2, 1
             B    INTERPRET4
INTERPRET1:  CMP  1, X&#34;2A    ; *
             BNZ  INTERPRET2
             POP  3, 1
             POP  1, 1
             MULT 1, (3)
             PUSH 2, 1
             B    INTERPRET4
INTERPRET2:  CMP  1, X&#34;2F    ; /
             BNZ  INTERPRET3
             POP  3, 2
             LC   1, 0
             DIV  1, (3)
             PUSH 2, 1
             B    INTERPRET4
INTERPRET3:  BSR  ISDIGIT    ; &#39;0&#39;-&#39;9&#39;
             CMP  1, 0
             BZ   INTERPRET6
             BSR  ATOI
             PUSH 1, 1
INTERPRET4:  ADD  0, 1
             B    INTERPRET
INTERPRET5:  POP  1, 1
INTERPRET6:  RET

; 整数を出力装置に書き込む関数
; 入力: {r1: 数値}
; 出力: なし
PUTINT:      LC   0, X&#34;30
             WIO  LPT
             LC   0, X&#34;78
             WIO  LPT
             LEA  2, (1)    ; r1[15:12] を出���
             SC   2, 4
             AND  2, X&#34;F
             LA   3, DIGIT
             ADD  2, (3)
             LX   0, (2)
             WIO  LPT
             LEA  2, (1)    ; r1[11:8] を出力
             SC   2, 8
             AND  2, X&#34;F
             LA   3, DIGIT
             ADD  2, (3)
             LX   0, (2)
             WIO  LPT
             LEA  2, (1)    ; r1[7:4] を出力
             SC   2, 12
             AND  2, X&#34;F
             LA   3, DIGIT
             ADD  2, (3)
             LX   0, (2)
             WIO  LPT
             LEA  2, (1)    ; r1[3:0] を出力
             AND  2, X&#34;F
             LA   3, DIGIT
             ADD  2, (3)
             LX   0, (2)
             WIO  LPT
             LC   0, X&#34;0D
             WIO  LPT
             LC   0, X&#34;0A
             WIO  LPT
             RET
DIGIT:       DC   X&#34;30
             DC   X&#34;31
             DC   X&#34;32
             DC   X&#34;33
             DC   X&#34;34
             DC   X&#34;35
             DC   X&#34;36
             DC   X&#34;37
             DC   X&#34;38
             DC   X&#34;39
             DC   X&#34;41
             DC   X&#34;42
             DC   X&#34;43
             DC   X&#34;44
             DC   X&#34;45
             DC   X&#34;46

; 入力装置から文字を読む関数
; 入力: なし
; 出力: {r0: 読んだ文字}
; NOTE: MICRO-alpha は入力が無い場合にヌル文字を読んだ扱いとする
;       この関数はヌル文字以外を読むまで，入力装置から文字を読み続ける
READWORD:    RIO  CR
             OR   0, (0)
             BZ   READWORD
             RET

; 入力文字列を数値に変換する
; 入力: {r0: 入力文字列}
; 出力: {r0: 入力文字列(読み進めたアドレス), r1: 変換後の数値}
ATOI:        LC   1, 0
ATOI0:       PUSH 1, 1
             LX   1, (0)
             BSR  ISDIGIT
             CMP  1, 0
             POP  1, 1
             BNZ  ATOI1
             RET
ATOI1:       MULT 1, 10
             LX   1, (0)
             SUB  1, X&#34;30
             ADD  1, (2)
             ADD  0, 1
             B    ATOI0

; 入力文字が数字(&#39;0&#39;-&#39;9&#39;)であるかを判定する
; 入力: {r1: 入力文字}
; 出力: {r1: 判定結果(1: 数字である，0: 数字でない)}
ISDIGIT:     CMP  1, X&#34;30
             BM   ISDIGIT0
             CMP  1, X&#34;39
             BP   ISDIGIT0
             LC   1, 1
             RET
ISDIGIT0:    LC   1, 0
             RET
END
$ rm1asm calculator -o calculator.b
$ python script/obj2coe.py arty-a7-100 calculator.b fpga/arty-a7-100/machine_program.coe
</code></pre><p>make コマンドを実行すると，Vivado のプロジェクトが作成されます．</p>
<pre tabindex="0"><code>$ make all
$ tree -L 2 vivado
vivado
└── arty-a7-100
    ├── arty-a7-100.cache
    ├── arty-a7-100.gen
    ├── arty-a7-100.hw
    ├── arty-a7-100.ip_user_files
    ├── arty-a7-100.srcs
    └── arty-a7-100.xpr

7 directories, 1 file
</code></pre><h3 id="fpga-上で逆ポーランド記法プログラムを動作させる">FPGA 上で逆ポーランド記法プログラムを動作させる<a href="#fpga-%e4%b8%8a%e3%81%a7%e9%80%86%e3%83%9d%e3%83%bc%e3%83%a9%e3%83%b3%e3%83%89%e8%a8%98%e6%b3%95%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%a0%e3%82%92%e5%8b%95%e4%bd%9c%e3%81%95%e3%81%9b%e3%82%8b" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<p>Vivado で回路を合成し，Arty A7-100 に書き込みましょう．
シリアル通信で Arty A7-100 にキーボード入力をしましょう．</p>
<pre tabindex="0"><code>$ sudo screen /dev/ttyUSB1 115200
(calc)&gt;&gt; 3 4 + 4 2 - *
0x000E
(calc)&gt;&gt; 
</code></pre><p>逆ポーランド記法の電卓で計算ができました！</p>
<h2 id="おわりに">おわりに<a href="#%e3%81%8a%e3%82%8f%e3%82%8a%e3%81%ab" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>今年度は MICRO-1 で散々遊びました．
もう遊びたくないですね．</p>
<p>何の役に立つのか分からない実装ですが，誰かしらに貢献できたら良いですね．
コンピュータ・アーキテクチャの歴史を学ぶ上で少しは参考になるのではないでしょうか．
なるのか？
ならなそう．</p>
]]></content></item><item><title>Operating System development tutorials in Rust on the Raspberry Pi をする #5</title><link>https://Kenta11.github.io/posts/2023-02-13-rust-raspberrypi-os-tutorials/</link><pubDate>Mon, 13 Feb 2023 23:00:00 +0900</pubDate><guid>https://Kenta11.github.io/posts/2023-02-13-rust-raspberrypi-os-tutorials/</guid><description>&amp;lt;no value&amp;gt;</description><content type="text/html" mode="escaped"><![CDATA[<h1 id="はじめに">はじめに<a href="#%e3%81%af%e3%81%98%e3%82%81%e3%81%ab" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h1>
<p><a href="../2023-02-02-rust-raspberrypi-os-tutorials">前回</a>の続きから．</p>
<h1 id="05_drivers_gpio_uarthttpsgithubcomrust-embeddedrust-raspberrypi-os-tutorialstreemaster05_drivers_gpio_uart"><a href="https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials/tree/master/05_drivers_gpio_uart">05_drivers_gpio_uart</a><a href="#05_drivers_gpio_uarthttpsgithubcomrust-embeddedrust-raspberrypi-os-tutorialstreemaster05_drivers_gpio_uart" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h1>
<h2 id="概要">概要<a href="#%e6%a6%82%e8%a6%81" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<ul>
<li>UART と GPIO のコントローラ用ドライバを追加する
<ul>
<li>これまでに作成した QEMU コンソールを捨てて， <code>ドライバマネージャ</code> を導入する</li>
</ul>
</li>
</ul>
<h2 id="ドライバマネージャ">ドライバマネージャ<a href="#%e3%83%89%e3%83%a9%e3%82%a4%e3%83%90%e3%83%9e%e3%83%8d%e3%83%bc%e3%82%b8%e3%83%a3" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<ul>
<li>
<p><code>ドライバサブシステム</code> をカーネルに追加</p>
<ul>
<li>参照：<code>src/driver.rs</code></li>
</ul>
</li>
<li>
<p><code>interface::DeviceDriver</code> トレイトは各デバイスドライバが実装する必要がある</p>
</li>
<li>
<p><code>crate::driver::driver_manager().init_drivers(...)</code> はドライバマネージャに全ての登録済みドライバをループさせ，初期化をキックし，オプションの <code>初期化後コールバック</code> も実行する</p>
</li>
</ul>
<h2 id="bsp-ドライバ実装">BSP ドライバ実装<a href="#bsp-%e3%83%89%e3%83%a9%e3%82%a4%e3%83%90%e5%ae%9f%e8%a3%85" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<ul>
<li>
<p><code>src/bsp/raspberrypi/driver.rs</code> の <code>init()</code> が <code>UART</code> と <code>GPIO</code> の登録の面倒をみる</p>
</li>
<li>
<p>ドライバは <code>src/bsp/device_driver</code> に保存されており，<code>BSP</code> が使用する</p>
</li>
<li>
<p>まず <code>PL011Uart</code> ドライバを追加する</p>
<ul>
<li><code>console::interface::*</code> トレイトを実装</li>
<li>メインシステムのコンソールとして使用</li>
</ul>
</li>
<li>
<p>次に <code>GPIO</code> ドライバを追加する</p>
<ul>
<li>このドキュメントでは Raspberry Pi 3 向けに <code>Makefile</code> が書かれている</li>
<li>Raspberry Pi 4 向けにビルドする場合は ターゲットに <code>BSP=rpi4</code> を指定
<ul>
<li>Raspberry Pi 3 しか持っていないので読み飛ばす</li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>BSP</code> は <code>src/bsp/raspberrypi/memory.rs</code> でメモリマップをもつ</p>
</li>
</ul>
<h2 id="sd-カードからブートする">SD カードからブートする<a href="#sd-%e3%82%ab%e3%83%bc%e3%83%89%e3%81%8b%e3%82%89%e3%83%96%e3%83%bc%e3%83%88%e3%81%99%e3%82%8b" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<ol>
<li><code>boot</code> という名前の <code>FAT32</code> のパーティションを作成</li>
<li>所定の内容の <code>config.txt</code> を作成</li>
<li><a href="https://github.com/raspberrypi/firmware/tree/master/ot">Raspberry Pi firmware repo</a> から <a href="https://github.com/raspberrypi/firmware/raw/master/boot/otcode.bin">bootcode.bin</a>, <a href="https://github.com/raspberrypi/firmware/raw/master/boot/xup.dat">fixup.dat</a>, <a href="https://github.com/raspberrypi/firmware/raw/master/boot/start.f">start.elf</a> をコピー</li>
<li><code>make</code> を実行</li>
<li><code>kernel8.img</code> をSDカードにコピーし，Raspberry Pi に挿入</li>
<li>シリアル通信端末で <code>UART</code> と接続</li>
<li>USB シリアルとホストPCを接続</li>
<li>Raspberry Pi を電源に接続し，出力を観察する</li>
</ol>
<h2 id="実行結果">実行結果<a href="#%e5%ae%9f%e8%a1%8c%e7%b5%90%e6%9e%9c" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<pre tabindex="0"><code>$ make

Compiling kernel ELF - rpi3
   Compiling mingo v0.5.0 (/home/kenta/Git/Kenta11/rust-raspberrypi-OS-tutorials/05_drivers_gpio_uart)
   Compiling tock-registers v0.8.1
   Compiling aarch64-cpu v9.0.0
    Finished release [optimized] target(s) in 1.83s

Generating stripped binary
        Name kernel8.img
        Size 10 KiB
$ sudo make qemu
[sudo] kenta のパスワード:

Launching QEMU
[0] mingo version 0.5.0
[1] Booting on: Raspberry Pi 3
[2] Drivers loaded:
      1. BCM PL011 UART
      2. BCM GPIO
[3] Chars written: 117
[4] Echoing input now
</code></pre>]]></content></item><item><title>Operating System development tutorials in Rust on the Raspberry Pi をする #4</title><link>https://Kenta11.github.io/posts/2023-02-02-rust-raspberrypi-os-tutorials/</link><pubDate>Thu, 02 Feb 2023 21:00:00 +0900</pubDate><guid>https://Kenta11.github.io/posts/2023-02-02-rust-raspberrypi-os-tutorials/</guid><description>&amp;lt;no value&amp;gt;</description><content type="text/html" mode="escaped"><![CDATA[<h1 id="はじめに">はじめに<a href="#%e3%81%af%e3%81%98%e3%82%81%e3%81%ab" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h1>
<p><a href="../2023-02-01-rust-raspberrypi-os-tutorials">前回</a>の続きから．</p>
<h1 id="04_safe_globalshttpsgithubcomrust-embeddedrust-raspberrypi-os-tutorialstreemaster04_safe_globals"><a href="https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials/tree/master/04_safe_globals">04_safe_globals</a><a href="#04_safe_globalshttpsgithubcomrust-embeddedrust-raspberrypi-os-tutorialstreemaster04_safe_globals" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h1>
<h2 id="概要">概要<a href="#%e6%a6%82%e8%a6%81" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<ul>
<li>
<p>疑似ロックを導入する話</p>
</li>
<li>
<p>global data structure に対して安全にアクセスするための OS 同期プリミティブの showcase（ショーケースってなんだろう）</p>
</li>
<li>
<p>safe Rust では <code>static mut</code> なグローバル変数を定義できないので，この章で排他制御の機能を導入し，変更可能なグローバル変数を実現する</p>
</li>
</ul>
<h2 id="実行結果">実行結果<a href="#%e5%ae%9f%e8%a1%8c%e7%b5%90%e6%9e%9c" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<pre tabindex="0"><code>$ make

Compiling kernel ELF - rpi3
   Compiling mingo v0.4.0 (/home/kenta/Git/Kenta11/rust-raspberrypi-OS-tutorials/04_safe_globals)
   Compiling tock-registers v0.8.1
   Compiling aarch64-cpu v9.0.0
    Finished release [optimized] target(s) in 6.09s

Generating stripped binary
        Name kernel8.img
        Size 7 KiB
$ sudo make test
[sudo] kenta のパスワード:

Boot test - rpi3
         -------------------------------------------------------------------
         🦀 Running 1 console I/O tests
         -------------------------------------------------------------------

           1. Checking for the string: &#39;Stopping here&#39;..................[ok]
         
         Console log:
           [0] Hello from Rust!
           [1] Chars written: 22
           [2] Stopping here

         -------------------------------------------------------------------
         ✅ Success: Boot test
         -------------------------------------------------------------------

$ sudo make qemu

Launching QEMU
[0] Hello from Rust!
[1] Chars written: 22
[2] Stopping here.
</code></pre>]]></content></item><item><title>Operating System development tutorials in Rust on the Raspberry Pi をする #3</title><link>https://Kenta11.github.io/posts/2023-02-01-rust-raspberrypi-os-tutorials/</link><pubDate>Wed, 01 Feb 2023 22:52:52 +0900</pubDate><guid>https://Kenta11.github.io/posts/2023-02-01-rust-raspberrypi-os-tutorials/</guid><description>&amp;lt;no value&amp;gt;</description><content type="text/html" mode="escaped"><![CDATA[<h1 id="はじめに">はじめに<a href="#%e3%81%af%e3%81%98%e3%82%81%e3%81%ab" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h1>
<p><a href="../2023-01-31-rust-raspberrypi-os-tutorials">前回</a>の続きから．</p>
<h1 id="03_hacky_hello_worldhttpsgithubcomrust-embeddedrust-raspberrypi-os-tutorialstreemaster03_hacky_hello_world"><a href="https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials/tree/master/03_hacky_hello_world">03_hacky_hello_world</a><a href="#03_hacky_hello_worldhttpsgithubcomrust-embeddedrust-raspberrypi-os-tutorialstreemaster03_hacky_hello_world" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h1>
<ul>
<li>QEMU がエミュレートする UART を介して，<code>println!</code> マクロで文字列を表示できるようにする
<ul>
<li><code>console::console</code> 関数は <code>core::fmt::Write</code> トレイトを実装した構造体を返す (<code>src/bsp/raspberrypi.rs</code>)
<ul>
<li>このトレイトは <code>write_str</code>, <code>write_char</code>, <code>write_fmt</code> 関数をもつ</li>
</ul>
</li>
<li><code>write_str</code> 関数は UART（アドレスが0x3F201000）に一文字ずつ書き込む (<code>src/console.rs</code>)</li>
<li><code>print!</code> と <code>println!</code> はそれぞれ <code>write_fmt</code> 関数を呼び出す（<code>src/print.rs</code>）
<ul>
<li><code>write_str</code> を実装すると <code>write_fmt</code> も自動的に実装されるのか？</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="実行結果">実行結果<a href="#%e5%ae%9f%e8%a1%8c%e7%b5%90%e6%9e%9c" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<pre tabindex="0"><code>$ make

Compiling kernel ELF - rpi3
   Compiling tock-registers v0.8.1
   Compiling mingo v0.3.0 (/home/kenta/Git/Kenta11/rust-raspberrypi-OS-tutorials/03_hacky_hello_world)
   Compiling aarch64-cpu v9.0.0
    Finished release [optimized] target(s) in 3.88s

Generating stripped binary
        Name kernel8.img
        Size 6 KiB
$ make test

Boot test - rpi3
docker: Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post &#34;http://%2Fvar%2Frun%2Fdocker.sock/v1.24/containers/create&#34;: dial unix /var/run/docker.sock: connect: permission denied.
See &#39;docker run --help&#39;.
make: *** [Makefile:216: test_boot] エラー 126
$ sudo make test
[sudo] kenta のパスワード:

Boot test - rpi3
         -------------------------------------------------------------------
         🦀 Running 1 console I/O tests
         -------------------------------------------------------------------

           1. Checking for the string: &#39;Stopping here&#39;..................[ok]
         
         Console log:
           Hello from Rust!
           Kernel panic!
           
           Panic location:
                 File &#39;src/main.rs&#39;, line 129, column 5
           
           Stopping here

         -------------------------------------------------------------------
         ✅ Success: Boot test
         -------------------------------------------------------------------


$ sudo make qemu

Launching QEMU
Hello from Rust!
Kernel panic!

Panic location:
      File &#39;src/main.rs&#39;, line 129, column 5

Stopping here.
</code></pre>]]></content></item><item><title>Operating System development tutorials in Rust on the Raspberry Pi をする #2</title><link>https://Kenta11.github.io/posts/2023-01-31-rust-raspberrypi-os-tutorials/</link><pubDate>Tue, 31 Jan 2023 22:17:41 +0900</pubDate><guid>https://Kenta11.github.io/posts/2023-01-31-rust-raspberrypi-os-tutorials/</guid><description>&amp;lt;no value&amp;gt;</description><content type="text/html" mode="escaped"><![CDATA[<h1 id="はじめに">はじめに<a href="#%e3%81%af%e3%81%98%e3%82%81%e3%81%ab" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h1>
<p><a href="../2023-01-30-rust-raspberrypi-os-tutorials">前回</a>の続きから．</p>
<h1 id="02_runtime_inithttpsgithubcomrust-embeddedrust-raspberrypi-os-tutorialstreemaster02_runtime_init"><a href="https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials/tree/master/02_runtime_init">02_runtime_init</a><a href="#02_runtime_inithttpsgithubcomrust-embeddedrust-raspberrypi-os-tutorialstreemaster02_runtime_init" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h1>
<ul>
<li><code>_start</code> で主記憶の初期化を行う</li>
<li>初期化後に <code>_start_rust</code>（<code>src/_arch/aarch64/cpu/boot.rs</code>）にエントリし，<code>kernel_init</code>（<code>src/main.rs</code>）を実行する</li>
</ul>
<h2 id="セクションの構成">セクションの構成<a href="#%e3%82%bb%e3%82%af%e3%82%b7%e3%83%a7%e3%83%b3%e3%81%ae%e6%a7%8b%e6%88%90" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<ul>
<li>
<p>DRAM の先頭アドレスは 0x80000</p>
</li>
<li>
<p>以下，リンカスクリプトで指定されているセクション</p>
</li>
<li>
<p>.boot_core_stack：boot 用のスタック？</p>
</li>
<li>
<p>.text：機械語命令列</p>
</li>
<li>
<p>.rodata：read-only データ．8バイトアラインされている．</p>
</li>
<li>
<p>.data：読み書き可能なデータ領域．初期化されない．</p>
</li>
<li>
<p>.bss：読み書き可能なデータ領域．初期化される．16バイトアラインされている．</p>
</li>
<li>
<p>.got：何に使うのか分からない</p>
</li>
</ul>
<h2 id="bootrs">boot.rs<a href="#bootrs" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<ul>
<li><code>MPIDR_EL1</code>：<code>PE (Processor Element)</code> を識別するためのレジスタ</li>
<li><code>CONST_CORE_ID_MASK</code> は <code>src/_arch/aarch64/cpu/boot.rs</code> で定義されている定数か
<ul>
<li>0b11 なので 3番目の PE が boot core として初期化処理を行う</li>
<li>他の PE は <code>L_parking_loop</code> で無限ループ（=何もさせない）</li>
</ul>
</li>
<li>x0, x1 レジスタにそれぞれ <code>__bss_start</code>, <code>__bss_end_exclusive</code> をセット</li>
<li>.bss をゼロ埋め
<ul>
<li>アセンブリ命令：<code>stp	xzr, xzr, [x0], #16</code>
<ul>
<li>stp: レジスタペアの内容を主記憶に書き込み</li>
<li>xzr: ゼロレジスタ</li>
<li>[x0]: 書き込み先のポインタ</li>
<li>#16: 書き込み先アドレスへのオフセット
<ul>
<li>stp 命令による書き込み後，x0 += 16 される</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><code>.L_prepare_rust</code> 以降
<ul>
<li>スタックポインタを機械語命令列の先頭へセット</li>
<li><code>_start_rust</code> へ分岐</li>
</ul>
</li>
</ul>
<h1 id="実行結果">実行結果<a href="#%e5%ae%9f%e8%a1%8c%e7%b5%90%e6%9e%9c" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h1>
<pre tabindex="0"><code>$ make

Compiling kernel ELF - rpi3
   Compiling tock-registers v0.8.1
   Compiling mingo v0.2.0 (/home/kenta/Git/Kenta11/rust-raspberrypi-OS-tutorials/02_runtime_init)
   Compiling aarch64-cpu v9.0.0
    Finished release [optimized] target(s) in 5.86s

Generating stripped binary
        Name kernel8.img
        Size 1 KiB
$ sudo make qemu

Launching QEMU
----------------
IN: 
0x00000300:  d2801b05  mov      x5, #0xd8
0x00000304:  d53800a6  mrs      x6, mpidr_el1
0x00000308:  924004c6  and      x6, x6, #3
0x0000030c:  d503205f  wfe      
0x00000310:  f86678a4  ldr      x4, [x5, x6, lsl #3]
0x00000314:  b4ffffc4  cbz      x4, #0x30c

----------------
IN: 
0x00000300:  d2801b05  mov      x5, #0xd8
0x00000304:  d53800a6  mrs      x6, mpidr_el1
0x00000308:  924004c6  and      x6, x6, #3
0x0000030c:  d503205f  wfe      
0x00000310:  f86678a4  ldr      x4, [x5, x6, lsl #3]
0x00000314:  b4ffffc4  cbz      x4, #0x30c

----------------
IN: 
0x00000000:  580000c0  ldr      x0, #0x18
0x00000004:  aa1f03e1  mov      x1, xzr
0x00000008:  aa1f03e2  mov      x2, xzr
0x0000000c:  aa1f03e3  mov      x3, xzr
0x00000010:  58000084  ldr      x4, #0x20
0x00000014:  d61f0080  br       x4

----------------
IN: 
0x00000300:  d2801b05  mov      x5, #0xd8
0x00000304:  d53800a6  mrs      x6, mpidr_el1
0x00000308:  924004c6  and      x6, x6, #3
0x0000030c:  d503205f  wfe      
0x00000310:  f86678a4  ldr      x4, [x5, x6, lsl #3]
0x00000314:  b4ffffc4  cbz      x4, #0x30c

----------------
IN: 
0x0000030c:  d503205f  wfe      
0x00000310:  f86678a4  ldr      x4, [x5, x6, lsl #3]
0x00000314:  b4ffffc4  cbz      x4, #0x30c

----------------
IN: 
0x0000030c:  d503205f  wfe      
0x00000310:  f86678a4  ldr      x4, [x5, x6, lsl #3]
0x00000314:  b4ffffc4  cbz      x4, #0x30c

----------------
IN: 
0x00080000:  d53800a0  mrs      x0, mpidr_el1
0x00080004:  92400400  and      x0, x0, #3
0x00080008:  58000241  ldr      x1, #0x80050
0x0008000c:  eb01001f  cmp      x0, x1
0x00080010:  540001a1  b.ne     #0x80044

----------------
IN: 
0x0000030c:  d503205f  wfe      
0x00000310:  f86678a4  ldr      x4, [x5, x6, lsl #3]
0x00000314:  b4ffffc4  cbz      x4, #0x30c

----------------
IN: 
0x00080014:  d503201f  nop      
0x00080018:  10000440  adr      x0, #0x800a0
0x0008001c:  d503201f  nop      
0x00080020:  10000401  adr      x1, #0x800a0
0x00080024:  eb01001f  cmp      x0, x1
0x00080028:  54000060  b.eq     #0x80034

----------------
IN: 
0x00080034:  d503201f  nop      
0x00080038:  10fffe40  adr      x0, #0x80000
0x0008003c:  9100001f  mov      sp, x0
0x00080040:  14000008  b        #0x80060

----------------
IN: 
0x00080060:  94000004  bl       #0x80070

----------------
IN: 
0x00080070:  94000004  bl       #0x80080

----------------
IN: 
0x00080080:  97fffffe  bl       #0x80078

----------------
IN: 
0x00080078:  94000006  bl       #0x80090

----------------
IN: 
0x00080090:  d503205f  wfe      
0x00080094:  17ffffff  b        #0x80090
</code></pre><h1 id="感想">感想<a href="#%e6%84%9f%e6%83%b3" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h1>
<ul>
<li>Rust コードを実行できるようになったので，いよいよ Rust で書いた OS の機能で遊べそうだ</li>
<li>stp が一命令で色々できることにビックリした
<ul>
<li>MIPS や RISC-V の方が慣れているので，ARM が CISC プロセッサのように思えてしまう</li>
</ul>
</li>
</ul>
]]></content></item><item><title>Operating System development tutorials in Rust on the Raspberry Pi をする #1</title><link>https://Kenta11.github.io/posts/2023-01-30-rust-raspberrypi-os-tutorials/</link><pubDate>Mon, 30 Jan 2023 22:30:15 +0900</pubDate><guid>https://Kenta11.github.io/posts/2023-01-30-rust-raspberrypi-os-tutorials/</guid><description>&amp;lt;no value&amp;gt;</description><content type="text/html" mode="escaped"><![CDATA[<h1 id="はじめに">はじめに<a href="#%e3%81%af%e3%81%98%e3%82%81%e3%81%ab" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h1>
<p>Rust で Raspberry Pi 向けのオペレーティングシステムを開発する<a href="https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials">チュートリアル</a>が公開されている．
早速やってみよう．</p>
<h1 id="00_before_we_starthttpsgithubcomrust-embeddedrust-raspberrypi-os-tutorialstreemaster00_before_we_start"><a href="https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials/tree/master/00_before_we_start">00_before_we_start</a><a href="#00_before_we_starthttpsgithubcomrust-embeddedrust-raspberrypi-os-tutorialstreemaster00_before_we_start" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h1>
<ul>
<li>プロセッサ・アーキテクチャ固有のソースコードは <code>src/_arch</code> に配置される
<ul>
<li>例：<code>aarch64</code> 向けのコードは <code>src/_arch/aarch64</code> に置かれる</li>
</ul>
</li>
<li>ボード固有のソースコードは <code>src/bsp.rs</code> に書かれる</li>
<li>「アーキテクチャとボード」とカーネルは，トレイトで抽象化されたインターフェースで分離される
<ul>
<li>クリーンな抽象を提供する</li>
</ul>
</li>
<li>boot の流れ
<ul>
<li>エントリポイントは <code>cpu::boot::arch_boot::_start()</code> (<code>src/_arch/__arch_name__/cpu/boot.s</code>)</li>
</ul>
</li>
</ul>
<h1 id="01_wait_foreverhttpsgithubcomrust-embeddedrust-raspberrypi-os-tutorialstreemaster01_wait_forever"><a href="https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials/tree/master/01_wait_forever">01_wait_forever</a><a href="#01_wait_foreverhttpsgithubcomrust-embeddedrust-raspberrypi-os-tutorialstreemaster01_wait_forever" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h1>
<ul>
<li>すべての CPU コアを halt させるプロジェクト
<ul>
<li>Rust コードにはほとんど処理が記述されていない
<ul>
<li>モジュールの定義やアセンブリコード (<code>src/_arch/aarch64/cpu/boot.rs</code>)，パニックの定義 (<code>src/cpu/panic_wait.rs</code>) など</li>
</ul>
</li>
<li>OS は qemu で実行できるようだ</li>
</ul>
</li>
<li>qemu で OS を動かしてみよう</li>
</ul>
<pre tabindex="0"><code>$ make qemu

Compiling kernel ELF - rpi3
   Compiling mingo v0.1.0 (/home/kenta/Git/Kenta11/rust-raspberrypi-OS-tutorials/01_wait_forever)
    Finished release [optimized] target(s) in 0.32s

Generating stripped binary
make: rust-objcopy: そのようなファイルやディレクトリはありません
make: *** [Makefile:130: kernel8.img] エラー 127
</code></pre><ul>
<li><code>rust-objcopy</code> が無いと言われた</li>
<li><code>rust-objcopy</code> は <a href="https://github.com/rust-embedded/cargo-binutils">cargo-binutils</a> に含まれるコマンドのようだ
<ul>
<li>LLVM のツールチェインを呼び出すコマンドっぽい？</li>
</ul>
</li>
<li>インストールして再度 OS を動かそう</li>
</ul>
<pre tabindex="0"><code>$ cargo install cargo-binutils
（とても時間がかかる）
$ make qemu

Generating stripped binary
        Name kernel8.img
        Size 1 KiB

Launching QEMU
docker: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?.
See &#39;docker run --help&#39;.
make: *** [Makefile:155: qemu] エラー 125
</code></pre><ul>
<li>docker も動かさないといけないらしい</li>
</ul>
<pre tabindex="0"><code>$ sudo systemctl restart docker
$ make qemu

Launching QEMU
docker: Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post &#34;http://%2Fvar%2Frun%2Fdocker.sock/v1.24/containers/create&#34;: dial unix /var/run/docker.sock: connect: permission denied.
See &#39;docker run --help&#39;.
make: *** [Makefile:155: qemu] エラー 126
</code></pre><ul>
<li>管理者権限まで必要なのか&hellip;（docker を使う以上当たり前だが）</li>
</ul>
<pre tabindex="0"><code>$ sudo make qemu

Launching QEMU
Unable to find image &#39;rustembedded/osdev-utils:2021.12&#39; locally
2021.12: Pulling from rustembedded/osdev-utils
7b1a6ab2e44d: Pull complete 
292c6ce995b4: Pull complete 
afb6c3c2887b: Pull complete 
888e016a338b: Pull complete 
59ca2d6f9c6f: Pull complete 
1ac893ad5b73: Pull complete 
008bb9e6650e: Pull complete 
Digest: sha256:9883c96e0e827e35b8d716683f85c7a9b8ffed85422fe418ed080d61e8641e78
Status: Downloaded newer image for rustembedded/osdev-utils:2021.12
----------------
IN: 
0x00000000:  580000c0  ldr      x0, #0x18
0x00000004:  aa1f03e1  mov      x1, xzr
0x00000008:  aa1f03e2  mov      x2, xzr
0x0000000c:  aa1f03e3  mov      x3, xzr
0x00000010:  58000084  ldr      x4, #0x20
0x00000014:  d61f0080  br       x4

----------------
IN: 
0x00000300:  d2801b05  mov      x5, #0xd8
0x00000304:  d53800a6  mrs      x6, mpidr_el1
0x00000308:  924004c6  and      x6, x6, #3
0x0000030c:  d503205f  wfe      
0x00000310:  f86678a4  ldr      x4, [x5, x6, lsl #3]
0x00000314:  b4ffffc4  cbz      x4, #0x30c

----------------
IN: 
0x00000300:  d2801b05  mov      x5, #0xd8
0x00000304:  d53800a6  mrs      x6, mpidr_el1
0x00000308:  924004c6  and      x6, x6, #3
0x0000030c:  d503205f  wfe      
0x00000310:  f86678a4  ldr      x4, [x5, x6, lsl #3]
0x00000314:  b4ffffc4  cbz      x4, #0x30c

----------------
IN: 
0x00000300:  d2801b05  mov      x5, #0xd8
0x00000304:  d53800a6  mrs      x6, mpidr_el1
0x00000308:  924004c6  and      x6, x6, #3
0x0000030c:  d503205f  wfe      
0x00000310:  f86678a4  ldr      x4, [x5, x6, lsl #3]
0x00000314:  b4ffffc4  cbz      x4, #0x30c

----------------
IN: 
0x00080000:  d503205f  wfe      
0x00080004:  17ffffff  b        #0x80000

----------------
IN: 
0x0000030c:  d503205f  wfe      
0x00000310:  f86678a4  ldr      x4, [x5, x6, lsl #3]
0x00000314:  b4ffffc4  cbz      x4, #0x30c

----------------
IN: 
0x0000030c:  d503205f  wfe      
0x00000310:  f86678a4  ldr      x4, [x5, x6, lsl #3]
0x00000314:  b4ffffc4  cbz      x4, #0x30c

----------------
IN: 
0x0000030c:  d503205f  wfe      
0x00000310:  f86678a4  ldr      x4, [x5, x6, lsl #3]
0x00000314:  b4ffffc4  cbz      x4, #0x30c
</code></pre><ul>
<li>
<p>0x80000 番地で無限ループをしていることが分かる</p>
</li>
<li>
<p>それ以外の命令で何をしているのかが分からない</p>
<ul>
<li>Raspberry Pi 3B+ に搭載された SoC は4コア構成なので，使わないコアも（0x30C-0x314 番地で）無限ループしている？</li>
</ul>
</li>
<li>
<p>分からないところがかなりあるが，進めていくうちに分かるかもしれない</p>
</li>
<li>
<p>とりあえず次に進もう</p>
</li>
</ul>
]]></content></item><item><title>Electron-Shogi &amp; 水匠5 on Manjaro</title><link>https://Kenta11.github.io/posts/2023-01-01-shogi-on-manjaro/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0900</pubDate><guid>https://Kenta11.github.io/posts/2023-01-01-shogi-on-manjaro/</guid><description>&amp;lt;no value&amp;gt;</description><content type="text/html" mode="escaped"><![CDATA[<h2 id="はじめに">はじめに<a href="#%e3%81%af%e3%81%98%e3%82%81%e3%81%ab" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>うちには強いマシンが Manjaro サーバしかないので，将棋の解析をこのサーバでやりたい．
ただし，いわゆる将棋ソフトは Windows で使うことを前提としているので，Manjaro なんていう変な環境でトライした人はいなさそうだ．
突貫工事ではあるが，Manjaro のデスクトップ環境で将棋の解析ができる環境を作ったので，その手順を記録しておく．</p>
<p>年の瀬になにやってんだ．</p>
<p><img src="shogi-on-manjaro.png" alt="Electron 将棋" title="Electron 将棋 と 水匠5 で解析している様子"></p>
<h2 id="1-uielectron-将棋をインストール">1. UI（Electron 将棋）をインストール<a href="#1-uielectron-%e5%b0%86%e6%a3%8b%e3%82%92%e3%82%a4%e3%83%b3%e3%82%b9%e3%83%88%e3%83%bc%e3%83%ab" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>まず Electron 将棋 の公式リポジトリからプロジェクト一式をダウンロードする．npm でビルドし，生成された実行バイナリを <code>~/.local/bin/</code> に配置する．npm 系のコマンドは既にインストールしていたので，環境によっては準備が必要かもしれない．</p>
<pre tabindex="0"><code>$ gh repo clone https://github.com/sunfish-shogi/electron-shogi
$ cd electron-shogi
$ git checkout v1.3.0 # 安定版が v1.3.0 らしい
$ npm install @vue/cli @vue/cli-service-global
$ npm run electron:build
$ find . -name &#39;ElectronShogi*&#39;
./dist_electron/ElectronShogi-1.3.0.AppImage
$ cp $(find . -name &#39;ElectronShogi*&#39;) ~/.local/bin/
</code></pre><h2 id="2-エンジンyaneuraouをインストール">2. エンジン（YaneuraOu）をインストール<a href="#2-%e3%82%a8%e3%83%b3%e3%82%b8%e3%83%b3yaneuraou%e3%82%92%e3%82%a4%e3%83%b3%e3%82%b9%e3%83%88%e3%83%bc%e3%83%ab" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>こちらもまずは YaneuraOu の公式リポジトリからプロジェクト一式をダウンロードする．Makefile の設定を環境に合わせて編集し，コンパイルを実施する．
Manjaro サーバの CPU は Ryzen 7 3700X なので，TARGET_CPU は ZEN2 とした．</p>
<pre tabindex="0"><code>$ gh repo clone https://github.com/Kenta11/YaneuraOu
$ cd YaneuraOu/source
$ vim Makefile # 今回は TARGET_CPU を AVX2 から ZEN2 に変更
$ make # 並列オプション -j を使うとコケたぞ
$ find . -name YaneuraOu-by-gcc
./YaneuraOu-by-gcc
</code></pre><h2 id="3-評価関数水匠5をインストール">3. 評価関数（水匠5）をインストール<a href="#3-%e8%a9%95%e4%be%a1%e9%96%a2%e6%95%b0%e6%b0%b4%e5%8c%a05%e3%82%92%e3%82%a4%e3%83%b3%e3%82%b9%e3%83%88%e3%83%bc%e3%83%ab" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>水匠5 の評価関数をダウンロードする．YaneuraOu の実行バイナリがあるディレクトリ下の <code>eval</code> ディレクトリに <code>nn.bin</code> を配置する．</p>
<pre tabindex="0"><code>$ gh repo clone https://github.com/HiraokaTakuya/get_suisho5_nn
$ cp get_suisho5_nn/nn.bin /path/to/YaneuraOu/source/eval/
</code></pre><h2 id="4-ui-からエンジンを選択">4. UI からエンジンを選択<a href="#4-ui-%e3%81%8b%e3%82%89%e3%82%a8%e3%83%b3%e3%82%b8%e3%83%b3%e3%82%92%e9%81%b8%e6%8a%9e" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<ul>
<li><code>electron-shogi</code> を実行</li>
<li>&ldquo;設定&rdquo;&gt;&ldquo;エンジン設定&rdquo; を選択し，エンジン（YaneuraOu）を選択</li>
<li>&ldquo;検討&rdquo;&gt;&ldquo;検討開始&rdquo; で局面を解析できる</li>
</ul>
<h2 id="おわりに">おわりに<a href="#%e3%81%8a%e3%82%8f%e3%82%8a%e3%81%ab" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>将棋の局面の解析が自宅マシンでできるようになった．
以上の方法で構築した環境がベストなのかは分からないが，少なくともプロ棋士が使うような解析環境は必要ないので，これで満足だ．</p>
]]></content></item><item><title>これまでに観た古典芸能の演目</title><link>https://Kenta11.github.io/posts/2022-12-19-classic-engei/</link><pubDate>Mon, 19 Dec 2022 22:00:00 +0900</pubDate><guid>https://Kenta11.github.io/posts/2022-12-19-classic-engei/</guid><description>&amp;lt;no value&amp;gt;</description><content type="text/html" mode="escaped"><![CDATA[<p>これまでに何度か古典芸能を観る機会があって，面白いなと思うことが増えてきた．
そこで，これまでに観た演目を記録しておく．
実際に劇場等で観たものは少ないので，テレビ や YouTube で観たものも含めて記載する．</p>
<ul>
<li>落語
<ul>
<li>一文笛</li>
<li>蝦蟇の油</li>
<li>紙入れ</li>
<li>紺屋高尾</li>
<li>黄金餅</li>
<li>三方一両損</li>
<li>死神</li>
<li>芝浜</li>
<li>寿限無</li>
<li>粗忽長屋</li>
<li>大工調べ</li>
<li>幇間腹</li>
<li>短命</li>
<li>時そば</li>
<li>猫の皿</li>
<li>鼠穴</li>
<li>引越しの夢</li>
<li>船徳</li>
<li>饅頭こわい</li>
<li>らくだ</li>
</ul>
</li>
<li>講談
<ul>
<li>連続物
<ul>
<li>赤垣源蔵 徳利の別れ</li>
<li>赤穂義士銘々伝 大高源吾</li>
<li>畔倉重四郎</li>
<li>寛永宮本武蔵伝 吉岡治太夫</li>
<li>笹野名槍伝 海賊退治</li>
<li>天保六花撰 玉子の強請</li>
<li>源平盛衰記 扇の的</li>
</ul>
</li>
<li>端物
<ul>
<li>鮫講釈</li>
<li>鹿政談</li>
<li>青龍刀権次</li>
<li>東玉と伯圓</li>
<li>中村仲蔵</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>これまでたくさん聴いたなあと思っていたけれど，題目を起こしてみると思いの外少ない．
来年は少しずつ増やしていこう．</p>
]]></content></item><item><title>情報工学実験II（再履修）</title><link>https://Kenta11.github.io/posts/2022-09-23-micro1/</link><pubDate>Fri, 23 Sep 2022 22:00:00 +0900</pubDate><guid>https://Kenta11.github.io/posts/2022-09-23-micro1/</guid><description>&amp;lt;no value&amp;gt;</description><content type="text/html" mode="escaped"><![CDATA[<h2 id="はじめに">はじめに<a href="#%e3%81%af%e3%81%98%e3%82%81%e3%81%ab" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>　出身学科も出身専攻も，完全に名称が無くなってしまいましたね．
過ごした時間に思いを馳せながら，マイクロプログラミングをしましょう（急展開）．</p>
<h2 id="アセンブラ">アセンブラ<a href="#%e3%82%a2%e3%82%bb%e3%83%b3%e3%83%96%e3%83%a9" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<h3 id="一覧">一覧<a href="#%e4%b8%80%e8%a6%a7" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<ul>
<li>機械語アセンブラ: <a href="https://github.com/Kenta11/rm1asm">rm1asm</a></li>
<li>マイクロアセンブラ: <a href="https://github.com/Kenta11/rm1masm">rm1masm</a></li>
</ul>
<h3 id="特徴">特徴<a href="#%e7%89%b9%e5%be%b4" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<ul>
<li>Unicode対応</li>
<li>マルチプラットフォームで動作（Windows，Linux，MacOS）</li>
<li>エラー表示機能付き（期待に添える程のクオリティ<strong>ではない</strong>）</li>
</ul>
<h2 id="遊び方">遊び方<a href="#%e9%81%8a%e3%81%b3%e6%96%b9" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>　まずはアセンブラとシミュレータをインストールして下さい．
アセンブラは<code>cargo install</code>でもインストールできますが，特にLinuxをお使いの方は<a href="https://github.com/Kenta11/rm1asm/releases/tag/v1.0.0">パッケージ</a>からのインストールが便利です．
シミュレータはWindowsユーザなら公式（？）に配布されているものを使いましょう．
それ以外の方は自前でビルドして下さい．</p>
<pre tabindex="0"><code>$ git clone https://github.com/Kenta11/micro1
$ cd micro1
$ gcc m1sim.c -o m1sim
</code></pre><p>　MICRO-1のマイクロプログラムをアセンブルします．</p>
<pre tabindex="0"><code>$ curl -s http://www.ced.is.utsunomiya-u.ac.jp/lecture/2022/jikkenb/micro/chap5/MICROONE | iconv -f sjis -t utf8 | tr -d &#34;\32&#34; &gt; MICROONE
$ rm1masm MICROONE -o MICROONE.o
</code></pre><p>　続いて機械語プログラムをアセンブルします．</p>
<pre tabindex="0"><code>$ cat sqrt
; This program is distributed under MIT LICENSE.
; Copyright (c) 2022 Kenta Arai
; 平方根を求めるプログラム
; アルゴリズムは&#34;バビロニア人の方法&#34;である

TITLE SQRT
         L   1, X0
         L   3, ERROR
; X(n+1)を計算
HEAD:    LEA 2, (1)
         LC  0, 0
         L   1, S
         BSR CALCXN1
; |X(n+1) - X(n)| &lt; ERROR の場合は計算を終了する
         SUB 2, (1)   ; X(n) - X(n+1)
         BSR ABS      ; |X(n+1) - X(n)|
         SUB 2, (3)   ; |X(n+1) - X(n)| - ERROR
         BNM HEAD
; 解を保存し，プログラムを終了
         ST  1, XN
         HLT

S:       DC  487      ; 入力
X0:      DC  20       ; 初期値X(0)
ERROR:   DC  5        ; エラー
XN:      DS  1        ; 解X(n)

; X(n+1)を計算する関数
; 入力: {r0: 0, r1: S, r2: X(n)}
; 出力: {r1: X(n+1), r2: X(n)}
CALCXN1: DIV 0, (2)   ; S/X(n)
         ADD 1, (2)   ; S/X(n) + X(n)
         SA  1, -1    ; (S/X(n) + X(n)) / 2 = X(n+1)
         RET

; 絶対値を計算する関数
; 入力: {r2: 整数}
; 出力: {r2: 絶対値}
ABS:     CMP 2, 0
         BNM ABS0
         XOR 2, X&#34;FFFF
         ADD 2, 1
ABS0:    RET 
END
$ rm1asm sqrt -o sqrt.b
</code></pre><p>　プログラムを実行してみましょう．</p>
<pre tabindex="0"><code>$ ./m1sim

   *** MICRO-1 SIMULATOR (C-Ver. 1.0d) [Sep 23 2022] ***

&gt;&gt; load
LOAD
  FILE NAME=?MICROONE.o
  LOADING &#39;MICROONE.o&#39;
 LOADED TO CM
&gt;&gt; load       
LOAD
  FILE NAME=?sqrt.b
  LOADING &#39;sqrt.b&#39;
 LOADED TO MM
&gt;&gt; trace
TRACE
  T?device
   TD?set
   DEVICE ?pc
   DEVICE ?ir
   DEVICE ?flag
   DEVICE ?r0
   DEVICE ?r1
   DEVICE ?r2
   DEVICE ?r3
   DEVICE ?lbus
   DEVICE ?rbus
   DEVICE ?abus
   DEVICE ?sbus
   DEVICE ?.
   TD?.

  T?go
 CMAR=?101
 MAX STEP=?300
CMAR  PC   IR  ZNCOCT  R0   R1   R2   R3  LBUS RBUS ABUS SBUS 
102  0000 0000 000010 0000 0000 0000 0000 0000 0040 0040 0040 
～中略～
CMAR  PC   IR  ZNCOCT  R0   R1   R2   R3  LBUS RBUS ABUS SBUS 
0FD  000C EF00 000010 0007 0016 FFFD 0005 0000 0000 0000 0000 
 CPU HALTED !
  259 STEPS USED
  T?.
&gt;&gt; dump
DUMP
  D?mm
    START ADRS ?000C
    END   ADRS ?000F
000C:01E7
000D:0014
000E:0005
000F:0016
  D?.
&gt;&gt; end
&gt;&gt;   MICRO-1 TERMINATED
</code></pre><p>　XN(アドレスが0x000Fの行)に487の大体の平方根22(0x0016)が格納されていますね．
大大大成功です．</p>
<h2 id="おわりに">おわりに<a href="#%e3%81%8a%e3%82%8f%e3%82%8a%e3%81%ab" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>　Rust製の言語処理系ライブラリ（logosとchumsky）で遊んでいたら，いつの間にかアセンブラを書いていた．
何を言っているのか わからねーと思うが（以下略）</p>
<p>　MICRO-1が書かれた書籍は絶版だし，このまま授業も無くなってしまったら悲しいですね．
アセンブラはGitHubに置いておけばしばらくは残ると思うので，歴史的なアレコレとして誰か活用して下さい．</p>
<p>　P.S. サンプルプログラムのライセンスが不明なので，本家からダウンロードできなくなったらどうしよう&hellip;</p>
<p>おしまい</p>
]]></content></item></channel></rss>