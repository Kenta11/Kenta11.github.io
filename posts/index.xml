<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>Posts on Kenta Arai Webpage</title><link>https://Kenta11.github.io/posts/</link><description>Recent content in Posts on Kenta Arai Webpage</description><generator>Hugo -- 0.145.0</generator><language>en-us</language><lastBuildDate>Sun, 06 Apr 2025 10:30:00 +0900</lastBuildDate><atom:link href="https://Kenta11.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>「オブジェクト指向でなぜつくるのか 第2版」を読んだ</title><link>https://Kenta11.github.io/posts/2025-04-06-read-why-oop/</link><pubDate>Sun, 06 Apr 2025 10:30:00 +0900</pubDate><guid>https://Kenta11.github.io/posts/2025-04-06-read-why-oop/</guid><description>&amp;lt;no value&amp;gt;</description><content type="text/html" mode="escaped"><![CDATA[<p>オブジェクト指向（以下、OO）って結局なんやねん、という疑問がふと湧いて購入。
後で気が付いたのだが、第3版が4年前に出版されていた。
第2版までは Java を主な題材としていたが、最新版では Python や Ruby が扱われているらしい。</p>
<p><a href="https://bookplus.nikkei.com/atcl/catalog/11/P84650/">オブジェクト指向でなぜつくるのか 第2版</a></p>
<p><a href="https://bookplus.nikkei.com/atcl/catalog/21/S00180/">オブジェクト指向でなぜつくるのか 第3版</a></p>
<p>これまで C++ や Python などのオブジェクト指向プログラミング言語（以下、OOPL）に触れてきたが、そもそもこれらに共通する OO を、私は自分の言葉で説明できないなと気が付いた。</p>
<ul>
<li>OO の定義って誰が決めてるの？</li>
<li>OOPL に必要な機能ってなに？</li>
<li>数あるプログラミングパラダイムの中で、なぜ OO なの？</li>
</ul>
<p>などなど、色々と分かってないことがあったので、OO を再学習する取っ掛かりとして読んでみた。</p>
<p>読んでみて上記の疑問はある程度解決されたと思う。</p>
<p>OO の定義は、何か標準があるわけではないが、歴史的に醸成されてきたものらしい。
Simula67 で生まれた OO の概念（現代ほど成熟してはいない？）が、アラン・ケイらによって洗練されて、Smalltalk で導入されたようだ。
ここでの成功が現代の OOPL に繋がっているのだろう。</p>
<p>現代の OOPL で共通する要素は、クラス、ポリモーフィズム、継承の3つだ<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>。</p>
<p>クラスはデータ型とそのデータ型に関する演算を定義するものである。
OO 以前の言語でありがちな、意図しないデータの更新を防ぐことで、安全性や保守性を改善できる。</p>
<p>ということが分かるような本書は、OO 初学者にとっては OO を俯瞰できる良書だと思う。
より厳密に、具体的に、詳細に OO を知りたい、という人向けに、各章の末尾に参考文献が記載されているのも嬉しい。</p>
<p>個人的な一番の収穫は GoF のデザインパターンを知れたことだった。
個々のパターンはなんとなく知っていたが、ルーツがあるとは恥ずかしながら知らなかった。
早速デザインパターンの本を購入したので、機会があれば紹介したい。</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>個人的にはカプセル化、多態性、継承って言う。本書だけを読む分にはどちらで考えても差し支えなさそう。&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content></item><item><title>「ソフトウェア・テストの技法 第2版」を読んだ</title><link>https://Kenta11.github.io/posts/2025-03-01-reading-books-the-art-of-software-testing/</link><pubDate>Sat, 01 Mar 2025 13:25:52 +0900</pubDate><guid>https://Kenta11.github.io/posts/2025-03-01-reading-books-the-art-of-software-testing/</guid><description>&amp;lt;no value&amp;gt;</description><content type="text/html" mode="escaped"><![CDATA[<p>「ソフトウェア・テストの技法 第2版」はその名前の通りソフトウェア・テストについて書かれた書籍だ。第1版は1980年、第2版は2006年の出版と、ソフトウェア業界的には非常に古い本であるが、未だに読まれているらしい。いわゆる古典的名著か。</p>
<div class="amazlet-box" style="margin-bottom:0px;">
    <div class="amazlet-image" style="float:left;margin:0px 12px 1px 0px;">
        <a href="https://tatsu-zine.com/books/the-art-of-software-testing" name="amazletlink" target="_blank">
            <img src="https://tatsu-zine.com/images/books/1044/cover_s.jpg" alt="ソフトウェア・テストの技法　第2版" title="ソフトウェア・テストの技法　第2版" style="border: none;" />
        </a>
    </div>
    <div class="amazlet-info" style="line-height:120%;margin-bottom:10px">
        <div class="amazlet-name" style="margin-bottom:10px;line-height:120%">
            <a href="https://tatsu-zine.com/books/the-art-of-software-testing" name="amazletlink" target="_blank">ソフトウェア・テストの技法　第2版【電子書籍】</a>
        </div>
        <div class="amazlet-detail">Glenford J. Myers, Tom Badgett, Todd M. Thomas, Corey Sandler(著), 長尾真(監訳), 松尾正信(訳)<br />近代科学社<br />発行日: 2019-06-04<br />対応フォーマット: PDF<br /></div>
        <div class="amazlet-sub-info" style="float:left;">
            <div class="amazlet-link" style="margin-top:5px">
                <a href="https://tatsu-zine.com/books/the-art-of-software-testing" name="amazletlink" target="_blank">詳細を見る</a>
            </div>
        </div>
    </div>
    <div class="amazlet-footer" style="clear:left"></div>
</div>
<p>私は大学で情報工学を学んで、就職後はソフトウェア開発に関わってきた。そんな中、ソフトウェア・テストのみを取り上げた書籍を読んだことがあまりなかった<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>。テストフレームワークや CI/CD は頻繁に関する話題はよく目にするが、ソフトウェア・テストを詳説する専門書はあまり見かけない気がする。本著が名著故に競合が現れないのか、それともソフトウェア・テストが比較的興味を持たれにくい領域だからだろうか。</p>
<p>本著は9章構成であるが、4章まで読んで中断した。そこまで読むだけでも有益だったし、もう一度読み直したいと思った。今の段階でも十分に良い書籍だと思ったので、読んだところまで紹介する。</p>
<p>2章「プログラム・テストの心理学と経済学」はとても教訓に満ちた内容だ。ソフトウェア・テストでは得てして可能な限りの入出力を検証しがちだが、限られた時間的、人員的、資金的リソースの中で可能なテストは限られている。そうした制約の中で、最小のコストで最大の効果を得るためのテストをする意義が述べられている。もうちょっと若い時に読みたかった。</p>
<p>4章「テスト・ケースの設計」はどんなことをどんな風にテストするかを解説している。テスト対象を分析する基本的な手法（原因-結果グラフ、限界値分析等）を、具体的な事例を交えながら説明している。この章は個人的に難しく感じており、躓いてしまった。せっかく具体例を挙げているので、読み直して分析をなぞりながら理解したいと思っている。これは宿題だ。</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>「テスト駆動開発による組み込みプログラミング」くらいだろうか&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content></item><item><title>Vitis HLS on Ubuntu on Manjaro</title><link>https://Kenta11.github.io/posts/2023-04-27-vitis_hls-on-ubuntu-on-manjaro/</link><pubDate>Fri, 28 Apr 2023 21:30:00 +0900</pubDate><guid>https://Kenta11.github.io/posts/2023-04-27-vitis_hls-on-ubuntu-on-manjaro/</guid><description>&amp;lt;no value&amp;gt;</description><content type="text/html" mode="escaped"><![CDATA[<h2 id="はじめに">はじめに<a href="#%e3%81%af%e3%81%98%e3%82%81%e3%81%ab" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>Manjaro で Vitis HLS の<a href="https://github.com/Kenta11/Vitis-HLS-Introductory-Examples">サンプルプログラム</a>を試したところ，CSIM ができなかった．
サポートされていない Manjaro で試行錯誤するのも時間の浪費なので，Docker で Ubuntu コンテナを動かし，そこで Vitis HLS を試してみることにする．</p>
<h2 id="前提条件">前提条件<a href="#%e5%89%8d%e6%8f%90%e6%9d%a1%e4%bb%b6" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<ul>
<li>Vitis HLS をインストールしたマシン上で Docker を動作させる
<ul>
<li>Ubuntu コンテナのファイルシステムで Vitis のディレクトリをマウントし，Vitis をインストールした Ubuntu 環境を擬似的に用意する</li>
</ul>
</li>
</ul>
<h2 id="docker-上で-ubuntu-コンテナを動作させる">Docker 上で Ubuntu コンテナを動作させる<a href="#docker-%e4%b8%8a%e3%81%a7-ubuntu-%e3%82%b3%e3%83%b3%e3%83%86%e3%83%8a%e3%82%92%e5%8b%95%e4%bd%9c%e3%81%95%e3%81%9b%e3%82%8b" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>以下の Dockerfile を準備する．
<code>apt install</code> でいくつかパッケージをインストールする．
これらのパッケージは CSIM で必要になる．
また，環境変数<code>LIBRARY_PATH</code>を定義しているが，これも CSIM で必要になる．</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Dockerfile" data-lang="Dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> ubuntu:22.04</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">LABEL</span> maintainer <span class="s2">&#34;Kenta Arai &lt;&gt;&#34;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> apt update -y <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="o">&amp;&amp;</span> apt dist-upgrade -y <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="o">&amp;&amp;</span> apt autoremove -y <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="o">&amp;&amp;</span> apt install build-essential gcc-multilib git language-pack-en libc6-dev libtinfo5 -y <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">&#34;export LIBRARY_PATH=/usr/lib/x86_64-linux-gnu&#34;</span> &gt;&gt; ~/.bashrc<span class="err">
</span></span></span></code></pre></div><p>次に Docker イメージを作成し，コンテナを生成する．
<code>/opt</code> 下に Vitis をインストールしたディレクトリをマウントする．</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ ls
</span></span><span class="line"><span class="cl">Dockerfile
</span></span><span class="line"><span class="cl">$ sudo docker buildx build -t ubuntu_22.04_for_vitis .
</span></span><span class="line"><span class="cl">$ sudo docker run -it --name ubuntu_22.04_for_vitis <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--mount <span class="nv">type</span><span class="o">=</span>bind,src<span class="o">=</span>/opt/Xilinx/2022.2,dst<span class="o">=</span>/opt/Xilinx/2022.2,readonly <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>ubuntu_22.04_for_vitis /bin/bash
</span></span></code></pre></div><h2 id="ubuntu-上で-vitis-hls-を動作させる">Ubuntu 上で Vitis HLS を動作させる<a href="#ubuntu-%e4%b8%8a%e3%81%a7-vitis-hls-%e3%82%92%e5%8b%95%e4%bd%9c%e3%81%95%e3%81%9b%e3%82%8b" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>Vitis HLS のサンプルプログラムをダウンロードし，<code>vitis_hls</code>で論理合成，CSIM，COSIM を開始する．</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># cd ~</span>
</span></span><span class="line"><span class="cl"><span class="c1"># git clone https://github.com/Kenta11/Vitis-HLS-Introductory-Examples</span>
</span></span><span class="line"><span class="cl"><span class="c1"># cd Vitis-HLS-Introductory-Examples/Modeling/using_vectors/</span>
</span></span><span class="line"><span class="cl"><span class="c1"># source /opt/Xilinx/2022.2/Vivado/2022.2/settings64.sh</span>
</span></span><span class="line"><span class="cl"><span class="c1"># vitis_hls -f run_hls.tcl</span>
</span></span></code></pre></div><p>論理合成と CSIM を無事に完了することができた．
ただし COSIM は途中で終了してしまった．
以下は COSIM のログである．</p>
<pre tabindex="0"><code>****** xsim v2022.2 (64-bit)
  **** SW Build 3671981 on Fri Oct 14 04:59:54 MDT 2022
  **** IP Build 3669848 on Fri Oct 14 08:30:02 MDT 2022
    ** Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.

source xsim.dir/example/xsim_script.tcl
# xsim {example} -autoloadwcfg -tclbatch {example.tcl}
Time resolution is 1 ps
source example.tcl
## run all
////////////////////////////////////////////////////////////////////////////////////
// Inter-Transaction Progress: Completed Transaction / Total Transaction
// Intra-Transaction Progress: Measured Latency / Latency Estimation * 100%
//
// RTL Simulation : &#34;Inter-Transaction Progress&#34; [&#34;Intra-Transaction Progress&#34;] @ &#34;Simulation Time&#34;
////////////////////////////////////////////////////////////////////////////////////
// RTL Simulation : 0 / 1 [n/a] @ &#34;128000&#34;
// RTL Simulation : 1 / 1 [n/a] @ &#34;2523000&#34;
////////////////////////////////////////////////////////////////////////////////////
$finish called at time : 2552500 ps : File &#34;/root/Vitis-HLS-Introductory-Examples/Modeling/using_vectors/proj_example/solution1/sim/verilog/example.autotb.v&#34; Line 588
## quit
INFO: [Common 17-206] Exiting xsim at Fri Apr 28 12:31:04 2023...
ERROR: [COSIM 212-4] *** C/RTL co-simulation finished: FAIL ***
INFO: [COSIM 212-211] II is measurable only when transaction number is greater than 1 in RTL simulation. Otherwise, they will be marked as all NA. If user wants to calculate them, please make sure there are at least 2 transactions in RTL simulation.
INFO: [HLS 200-111] Finished Command cosim_design CPU user time: 52.13 seconds. CPU system time: 2.92 seconds. Elapsed time: 46.81 seconds; current allocated memory: 9.879 MB.
command &#39;ap_source&#39; returned error code
    while executing
&#34;source run_hls.tcl&#34;
    (&#34;uplevel&#34; body line 1)
    invoked from within
&#34;uplevel \#0 [list source $arg] &#34;

INFO: [HLS 200-112] Total CPU user time: 71.46 seconds. Total CPU system time: 4.64 seconds. Total elapsed time: 78.79 seconds; peak allocated memory: 912.445 MB.
INFO: [Common 17-206] Exiting vitis_hls at Fri Apr 28 12:31:04 2023...
</code></pre><h2 id="おわりに">おわりに<a href="#%e3%81%8a%e3%82%8f%e3%82%8a%e3%81%ab" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>Vitis HLS の CSIM は Manjaro ではできなかったが，Docker 上で動作する Ubuntu コンテナでは CSIM をすることができた．
ただし COSIM はできなかった．
公式のサンプルプログラムなので COSIM ができないということは無いと思いたい．
余力があれば原因を調べよう．</p>
]]></content></item><item><title>情報工学実験II（再々履修）</title><link>https://Kenta11.github.io/posts/2023-03-18-micro-alpha/</link><pubDate>Sat, 18 Mar 2023 19:00:00 +0900</pubDate><guid>https://Kenta11.github.io/posts/2023-03-18-micro-alpha/</guid><description>&amp;lt;no value&amp;gt;</description><content type="text/html" mode="escaped"><![CDATA[<h2 id="はじめに">はじめに<a href="#%e3%81%af%e3%81%98%e3%82%81%e3%81%ab" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>MICRO-1 の FPGA 実装をしました．
最近 SystemVerilog を書き始めたことと，HDL 開発におけるテスト手法を調べたことで，何か成果を作りたくなったためです．</p>
<h2 id="成果">成果<a href="#%e6%88%90%e6%9e%9c" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<ul>
<li><a href="https://github.com/Kenta11/micro-alpha">MICRO-alpha</a></li>
</ul>
<h2 id="micro-1-との相違点">MICRO-1 との相違点<a href="#micro-1-%e3%81%a8%e3%81%ae%e7%9b%b8%e9%81%95%e7%82%b9" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>MICRO-alpha は MICRO-1 で実行できる制御命令を全てサポートしたのですが，実際に実装するにあたって，設計の細かな部分を変更しました．</p>
<p>機械語の入出力命令はカードリーダとラインプリンタを扱うのですが，流石にそんなものは身の回りにありません．
そこで UART を使ったシリアル通信で代用しました．</p>
<p>入力命令は R0 レジスタにシリアル入力を書き込むように変更しました．
ただし入力が無い場合が想定されるので，その場合は R0 をゼロクリアします．
入力がないケースは少なくともテキストでは想定されていないので，やむを得ずこのような対処をしています．</p>
<p>出力命令は R0 レジスタをシリアル出力するように変更しました．</p>
<p>テキストでは，主記憶装置が「比較的大容量の記憶装置である」と書かれていますが，MICRO-1 の主記憶装置は現代の感覚ではかなり小さい（16bit x 64K）です．
なので FPGA 実装では Block RAM を主記憶装置に充てました．</p>
<p>また細かいところですが，制御装置の動作周波数はテキストの 20MHz ではなく 100MHz としました．
これは実装した FPGA ボードのクロック入力と同じ動作周波数にしています．</p>
<h2 id="遊び方">遊び方<a href="#%e9%81%8a%e3%81%b3%e6%96%b9" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p><strong>（追記）v1.1.4 から CLI 上で Vivado プロジェクトを作成できるようにしました． v1.1.4 で遊ぶ場合は「Vivado プロジェクトを作成（v1.1.4 以降）」を参照してください．</strong></p>
<h3 id="vivado-プロジェクトを作成v114-以前">Vivado プロジェクトを作成（v1.1.4 以前）<a href="#vivado-%e3%83%97%e3%83%ad%e3%82%b8%e3%82%a7%e3%82%af%e3%83%88%e3%82%92%e4%bd%9c%e6%88%90v114-%e4%bb%a5%e5%89%8d" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<p><a href="../2022-09-23-micro1">以前の記事</a>で紹介したツールをインストールしたマシンで回路合成します．
<a href="https://github.com/Kenta11/micro-alpha">MICRO-alpha</a>のリポジトリをクローンして，そのディレクトリ内にて<a href="https://github.com/Kenta11/micro-alpha/releases/tag/v1.0.0">リリースのページ</a>で公開している Vivado プロジェクト (micro-alpha-arty-a7-100.tar.gz) を解凍します．</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ git clone https://github.com/Kenta11/micro-alpha
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> micro-alpha
</span></span><span class="line"><span class="cl">$ wget https://github.com/Kenta11/micro-alpha/releases/download/v1.0.0/micro-alpha-arty-a7-100.tar.gz
</span></span><span class="line"><span class="cl">$ tar zxvf micro-alpha-arty-a7-100.tar.gz
</span></span><span class="line"><span class="cl">$ tree -L <span class="m">1</span>
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── LICENSE
</span></span><span class="line"><span class="cl">├── Makefile
</span></span><span class="line"><span class="cl">├── README.md
</span></span><span class="line"><span class="cl">├── micro-alpha-arty-a7-100.tar.gz
</span></span><span class="line"><span class="cl">├── run.py
</span></span><span class="line"><span class="cl">├── micro-alpha
</span></span><span class="line"><span class="cl">├── script
</span></span><span class="line"><span class="cl">├── src
</span></span><span class="line"><span class="cl">├── tb
</span></span></code></pre></div><p>マイクロプログラムを制御記憶に書き込むための COE ファイルを作成します．</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ curl -s http://www.ced.is.utsunomiya-u.ac.jp/lecture/2022/jikkenb/micro/chap5/MICROONE <span class="p">|</span> iconv -f sjis -t utf8 <span class="p">|</span> tr -d <span class="s2">&#34;\32&#34;</span> &gt; MICROONE
</span></span><span class="line"><span class="cl">$ rm1masm MICROONE -o MICROONE.o
</span></span><span class="line"><span class="cl">$ python script/obj2coe.py MICROONE.o micro-alpha/micro-alpha.srcs/sources_1/ip/control_memory/control_program.coe
</span></span></code></pre></div><p>続いて機械語プログラムを制御記憶に書き込むための COE ファイルを作成します．</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ cat calculator 
</span></span><span class="line"><span class="cl"><span class="p">;</span> This program is distributed under MIT LICENSE.
</span></span><span class="line"><span class="cl"><span class="p">;</span> Copyright <span class="o">(</span>c<span class="o">)</span> <span class="m">2023</span> Kenta Arai
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">;</span> 逆ポーランド記法電卓プログラム
</span></span><span class="line"><span class="cl"><span class="p">;</span> 
</span></span><span class="line"><span class="cl"><span class="p">;</span> 実行例（<span class="o">(</span>3+4<span class="o">)</span>*<span class="o">(</span>4-2<span class="o">)</span>）
</span></span><span class="line"><span class="cl"><span class="p">;</span> <span class="o">(</span>CALCULATOR<span class="o">)</span>&gt;&gt; <span class="m">3</span> <span class="m">4</span> + <span class="m">4</span> <span class="m">2</span> - *
</span></span><span class="line"><span class="cl"><span class="p">;</span> <span class="m">14</span>
</span></span><span class="line"><span class="cl">TITLE CALCULATOR
</span></span><span class="line"><span class="cl">             ORG  <span class="m">140</span>
</span></span><span class="line"><span class="cl">CALCULATOR0: LA   1, PROMPT
</span></span><span class="line"><span class="cl">             BSR  PRINT
</span></span><span class="line"><span class="cl">             LA   1, INPUT
</span></span><span class="line"><span class="cl">             BSR  RWLINE
</span></span><span class="line"><span class="cl">             LA   0, INPUT
</span></span><span class="line"><span class="cl">             BSR  INTERPRET
</span></span><span class="line"><span class="cl">             BSR  PUTINT
</span></span><span class="line"><span class="cl">             B    CALCULATOR0
</span></span><span class="line"><span class="cl">             HLT
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">;</span> データ領域
</span></span><span class="line"><span class="cl">PROMPT:      DC   <span class="s1">&#39; (
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   &#39;</span> c
</span></span><span class="line"><span class="cl">             DC   <span class="s1">&#39; a
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   &#39;</span> l
</span></span><span class="line"><span class="cl">             DC   <span class="s1">&#39; c
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   &#39;</span> <span class="o">)</span>
</span></span><span class="line"><span class="cl">             DC   <span class="s1">&#39; &gt;
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   &#39;</span> &gt;
</span></span><span class="line"><span class="cl">             DC   <span class="s1">&#39;  
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   0
</span></span></span><span class="line"><span class="cl"><span class="s1">INPUT:       DS   32
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">; 文字列を出力装置に書き込む関数
</span></span></span><span class="line"><span class="cl"><span class="s1">; 入力: {r1: 文字列の先頭アドレス}
</span></span></span><span class="line"><span class="cl"><span class="s1">; 出力: なし
</span></span></span><span class="line"><span class="cl"><span class="s1">PRINT0:      WIO  LPT
</span></span></span><span class="line"><span class="cl"><span class="s1">             LEA  1, 1(1)
</span></span></span><span class="line"><span class="cl"><span class="s1">PRINT:       LX   0, (1)
</span></span></span><span class="line"><span class="cl"><span class="s1">             OR   0, (0)
</span></span></span><span class="line"><span class="cl"><span class="s1">             BNZ  PRINT0
</span></span></span><span class="line"><span class="cl"><span class="s1">             RET
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">; 入力装置から行を読む関数
</span></span></span><span class="line"><span class="cl"><span class="s1">; 入力: {r1: 行の書込み先アドレス}
</span></span></span><span class="line"><span class="cl"><span class="s1">; 出力: なし
</span></span></span><span class="line"><span class="cl"><span class="s1">; NOTE: 読んだ文字は都度出力装置に書き込む
</span></span></span><span class="line"><span class="cl"><span class="s1">RWLINE0:     STX  0, (1)
</span></span></span><span class="line"><span class="cl"><span class="s1">             LEA  1, 1(1)
</span></span></span><span class="line"><span class="cl"><span class="s1">RWLINE:      BSR  READWORD
</span></span></span><span class="line"><span class="cl"><span class="s1">             WIO  LPT
</span></span></span><span class="line"><span class="cl"><span class="s1">             LC   2, X&#34;0D
</span></span></span><span class="line"><span class="cl"><span class="s1">             CMP  0, (2)
</span></span></span><span class="line"><span class="cl"><span class="s1">             BNZ  RWLINE0
</span></span></span><span class="line"><span class="cl"><span class="s1">             WIO  LPT
</span></span></span><span class="line"><span class="cl"><span class="s1">             LC   0, X&#34;0A
</span></span></span><span class="line"><span class="cl"><span class="s1">             WIO  LPT
</span></span></span><span class="line"><span class="cl"><span class="s1">             LC   0, 0
</span></span></span><span class="line"><span class="cl"><span class="s1">             STX  0, (1)
</span></span></span><span class="line"><span class="cl"><span class="s1">             RET
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">; 入力式を計算する
</span></span></span><span class="line"><span class="cl"><span class="s1">; 入力: {r0: 入力文字列}
</span></span></span><span class="line"><span class="cl"><span class="s1">; 出力: {r1: 計算結果}
</span></span></span><span class="line"><span class="cl"><span class="s1">INTERPRET:   LX   1, (0)
</span></span></span><span class="line"><span class="cl"><span class="s1">             CMP  1, 0       ; NULL
</span></span></span><span class="line"><span class="cl"><span class="s1">             BZ   INTERPRET5
</span></span></span><span class="line"><span class="cl"><span class="s1">             CMP  1, X&#34;20    ; SP
</span></span></span><span class="line"><span class="cl"><span class="s1">             BZ   INTERPRET4
</span></span></span><span class="line"><span class="cl"><span class="s1">             CMP  1, X&#34;2B    ; +
</span></span></span><span class="line"><span class="cl"><span class="s1">             BNZ  INTERPRET0
</span></span></span><span class="line"><span class="cl"><span class="s1">             POP  3, 2
</span></span></span><span class="line"><span class="cl"><span class="s1">             ADD  2, (3)
</span></span></span><span class="line"><span class="cl"><span class="s1">             PUSH 2, 1
</span></span></span><span class="line"><span class="cl"><span class="s1">             B    INTERPRET4
</span></span></span><span class="line"><span class="cl"><span class="s1">INTERPRET0:  CMP  1, X&#34;2D    ; -
</span></span></span><span class="line"><span class="cl"><span class="s1">             BNZ  INTERPRET1
</span></span></span><span class="line"><span class="cl"><span class="s1">             POP  3, 2
</span></span></span><span class="line"><span class="cl"><span class="s1">             SUB  2, (3)
</span></span></span><span class="line"><span class="cl"><span class="s1">             PUSH 2, 1
</span></span></span><span class="line"><span class="cl"><span class="s1">             B    INTERPRET4
</span></span></span><span class="line"><span class="cl"><span class="s1">INTERPRET1:  CMP  1, X&#34;2A    ; *
</span></span></span><span class="line"><span class="cl"><span class="s1">             BNZ  INTERPRET2
</span></span></span><span class="line"><span class="cl"><span class="s1">             POP  3, 1
</span></span></span><span class="line"><span class="cl"><span class="s1">             POP  1, 1
</span></span></span><span class="line"><span class="cl"><span class="s1">             MULT 1, (3)
</span></span></span><span class="line"><span class="cl"><span class="s1">             PUSH 2, 1
</span></span></span><span class="line"><span class="cl"><span class="s1">             B    INTERPRET4
</span></span></span><span class="line"><span class="cl"><span class="s1">INTERPRET2:  CMP  1, X&#34;2F    ; /
</span></span></span><span class="line"><span class="cl"><span class="s1">             BNZ  INTERPRET3
</span></span></span><span class="line"><span class="cl"><span class="s1">             POP  3, 2
</span></span></span><span class="line"><span class="cl"><span class="s1">             LC   1, 0
</span></span></span><span class="line"><span class="cl"><span class="s1">             DIV  1, (3)
</span></span></span><span class="line"><span class="cl"><span class="s1">             PUSH 2, 1
</span></span></span><span class="line"><span class="cl"><span class="s1">             B    INTERPRET4
</span></span></span><span class="line"><span class="cl"><span class="s1">INTERPRET3:  BSR  ISDIGIT    ; &#39;</span>0<span class="s1">&#39;-&#39;</span>9<span class="s1">&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">             CMP  1, 0
</span></span></span><span class="line"><span class="cl"><span class="s1">             BZ   INTERPRET6
</span></span></span><span class="line"><span class="cl"><span class="s1">             BSR  ATOI
</span></span></span><span class="line"><span class="cl"><span class="s1">             PUSH 1, 1
</span></span></span><span class="line"><span class="cl"><span class="s1">INTERPRET4:  ADD  0, 1
</span></span></span><span class="line"><span class="cl"><span class="s1">             B    INTERPRET
</span></span></span><span class="line"><span class="cl"><span class="s1">INTERPRET5:  POP  1, 1
</span></span></span><span class="line"><span class="cl"><span class="s1">INTERPRET6:  RET
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">; 整数を出力装置に書き込む関数
</span></span></span><span class="line"><span class="cl"><span class="s1">; 入力: {r1: 数値}
</span></span></span><span class="line"><span class="cl"><span class="s1">; 出力: なし
</span></span></span><span class="line"><span class="cl"><span class="s1">PUTINT:      LC   0, X&#34;30
</span></span></span><span class="line"><span class="cl"><span class="s1">             WIO  LPT
</span></span></span><span class="line"><span class="cl"><span class="s1">             LC   0, X&#34;78
</span></span></span><span class="line"><span class="cl"><span class="s1">             WIO  LPT
</span></span></span><span class="line"><span class="cl"><span class="s1">             LEA  2, (1)    ; r1[15:12] を出���
</span></span></span><span class="line"><span class="cl"><span class="s1">             SC   2, 4
</span></span></span><span class="line"><span class="cl"><span class="s1">             AND  2, X&#34;F
</span></span></span><span class="line"><span class="cl"><span class="s1">             LA   3, DIGIT
</span></span></span><span class="line"><span class="cl"><span class="s1">             ADD  2, (3)
</span></span></span><span class="line"><span class="cl"><span class="s1">             LX   0, (2)
</span></span></span><span class="line"><span class="cl"><span class="s1">             WIO  LPT
</span></span></span><span class="line"><span class="cl"><span class="s1">             LEA  2, (1)    ; r1[11:8] を出力
</span></span></span><span class="line"><span class="cl"><span class="s1">             SC   2, 8
</span></span></span><span class="line"><span class="cl"><span class="s1">             AND  2, X&#34;F
</span></span></span><span class="line"><span class="cl"><span class="s1">             LA   3, DIGIT
</span></span></span><span class="line"><span class="cl"><span class="s1">             ADD  2, (3)
</span></span></span><span class="line"><span class="cl"><span class="s1">             LX   0, (2)
</span></span></span><span class="line"><span class="cl"><span class="s1">             WIO  LPT
</span></span></span><span class="line"><span class="cl"><span class="s1">             LEA  2, (1)    ; r1[7:4] を出力
</span></span></span><span class="line"><span class="cl"><span class="s1">             SC   2, 12
</span></span></span><span class="line"><span class="cl"><span class="s1">             AND  2, X&#34;F
</span></span></span><span class="line"><span class="cl"><span class="s1">             LA   3, DIGIT
</span></span></span><span class="line"><span class="cl"><span class="s1">             ADD  2, (3)
</span></span></span><span class="line"><span class="cl"><span class="s1">             LX   0, (2)
</span></span></span><span class="line"><span class="cl"><span class="s1">             WIO  LPT
</span></span></span><span class="line"><span class="cl"><span class="s1">             LEA  2, (1)    ; r1[3:0] を出力
</span></span></span><span class="line"><span class="cl"><span class="s1">             AND  2, X&#34;F
</span></span></span><span class="line"><span class="cl"><span class="s1">             LA   3, DIGIT
</span></span></span><span class="line"><span class="cl"><span class="s1">             ADD  2, (3)
</span></span></span><span class="line"><span class="cl"><span class="s1">             LX   0, (2)
</span></span></span><span class="line"><span class="cl"><span class="s1">             WIO  LPT
</span></span></span><span class="line"><span class="cl"><span class="s1">             LC   0, X&#34;0D
</span></span></span><span class="line"><span class="cl"><span class="s1">             WIO  LPT
</span></span></span><span class="line"><span class="cl"><span class="s1">             LC   0, X&#34;0A
</span></span></span><span class="line"><span class="cl"><span class="s1">             WIO  LPT
</span></span></span><span class="line"><span class="cl"><span class="s1">             RET
</span></span></span><span class="line"><span class="cl"><span class="s1">DIGIT:       DC   X&#34;30
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   X&#34;31
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   X&#34;32
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   X&#34;33
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   X&#34;34
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   X&#34;35
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   X&#34;36
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   X&#34;37
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   X&#34;38
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   X&#34;39
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   X&#34;41
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   X&#34;42
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   X&#34;43
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   X&#34;44
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   X&#34;45
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   X&#34;46
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">; 入力装置から文字を読む関数
</span></span></span><span class="line"><span class="cl"><span class="s1">; 入力: なし
</span></span></span><span class="line"><span class="cl"><span class="s1">; 出力: {r0: 読んだ文字}
</span></span></span><span class="line"><span class="cl"><span class="s1">; NOTE: MICRO-alpha は入力が無い場合にヌル文字を読んだ扱いとする
</span></span></span><span class="line"><span class="cl"><span class="s1">;       この関数はヌル文字以外を読むまで，入力装置から文字を読み続ける
</span></span></span><span class="line"><span class="cl"><span class="s1">READWORD:    RIO  CR
</span></span></span><span class="line"><span class="cl"><span class="s1">             OR   0, (0)
</span></span></span><span class="line"><span class="cl"><span class="s1">             BZ   READWORD
</span></span></span><span class="line"><span class="cl"><span class="s1">             RET
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">; 入力文字列を数値に変換する
</span></span></span><span class="line"><span class="cl"><span class="s1">; 入力: {r0: 入力文字列}
</span></span></span><span class="line"><span class="cl"><span class="s1">; 出力: {r0: 入力文字列(読み進めたアドレス), r1: 変換後の数値}
</span></span></span><span class="line"><span class="cl"><span class="s1">ATOI:        LC   1, 0
</span></span></span><span class="line"><span class="cl"><span class="s1">ATOI0:       PUSH 1, 1
</span></span></span><span class="line"><span class="cl"><span class="s1">             LX   1, (0)
</span></span></span><span class="line"><span class="cl"><span class="s1">             BSR  ISDIGIT
</span></span></span><span class="line"><span class="cl"><span class="s1">             CMP  1, 0
</span></span></span><span class="line"><span class="cl"><span class="s1">             POP  1, 1
</span></span></span><span class="line"><span class="cl"><span class="s1">             BNZ  ATOI1
</span></span></span><span class="line"><span class="cl"><span class="s1">             RET
</span></span></span><span class="line"><span class="cl"><span class="s1">ATOI1:       MULT 1, 10
</span></span></span><span class="line"><span class="cl"><span class="s1">             LX   1, (0)
</span></span></span><span class="line"><span class="cl"><span class="s1">             SUB  1, X&#34;30
</span></span></span><span class="line"><span class="cl"><span class="s1">             ADD  1, (2)
</span></span></span><span class="line"><span class="cl"><span class="s1">             ADD  0, 1
</span></span></span><span class="line"><span class="cl"><span class="s1">             B    ATOI0
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">; 入力文字が数字(&#39;</span>0<span class="s1">&#39;-&#39;</span>9<span class="err">&#39;</span><span class="o">)</span>であるかを判定する
</span></span><span class="line"><span class="cl"><span class="p">;</span> 入力: <span class="o">{</span>r1: 入力文字<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="p">;</span> 出力: <span class="o">{</span>r1: 判定結果<span class="o">(</span>1: 数字である，0: 数字でない<span class="o">)}</span>
</span></span><span class="line"><span class="cl">ISDIGIT:     CMP  1, X<span class="s2">&#34;30
</span></span></span><span class="line"><span class="cl"><span class="s2">             BM   ISDIGIT0
</span></span></span><span class="line"><span class="cl"><span class="s2">             CMP  1, X&#34;</span><span class="m">39</span>
</span></span><span class="line"><span class="cl">             BP   ISDIGIT0
</span></span><span class="line"><span class="cl">             LC   1, <span class="m">1</span>
</span></span><span class="line"><span class="cl">             RET
</span></span><span class="line"><span class="cl">ISDIGIT0:    LC   1, <span class="m">0</span>
</span></span><span class="line"><span class="cl">             RET
</span></span><span class="line"><span class="cl">END
</span></span><span class="line"><span class="cl">$ rm1asm calculator -o calculator.b
</span></span><span class="line"><span class="cl">$ python script/obj2coe.py calculator.b micro-alpha/micro-alpha.srcs/sources_1/ip/main_memory/machine_program.coe
</span></span></code></pre></div><h3 id="vivado-プロジェクトを作成v114-以降">Vivado プロジェクトを作成（v1.1.4 以降）<a href="#vivado-%e3%83%97%e3%83%ad%e3%82%b8%e3%82%a7%e3%82%af%e3%83%88%e3%82%92%e4%bd%9c%e6%88%90v114-%e4%bb%a5%e9%99%8d" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<ul>
<li><strong>注意：Basys 3 で動かす場合は以下のように読み替えてください</strong>
<ul>
<li><code>fpga/arty-a7-100/</code> -&gt; <code>fpga/basys-3/</code></li>
<li>Makefile の変数 <code>SCRIPT</code> を Basys3 用に切り替える</li>
</ul>
</li>
</ul>
<p><a href="../2022-09-23-micro1">以前の記事</a>で紹介したツールをインストールしたマシンで回路合成します．
<a href="https://github.com/Kenta11/micro-alpha">MICRO-alpha</a>のリポジトリをクローンしてください．</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ git clone https://github.com/Kenta11/micro-alpha
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> micro-alpha
</span></span><span class="line"><span class="cl">$ tree -L <span class="m">1</span>
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── LICENSE
</span></span><span class="line"><span class="cl">├── Makefile
</span></span><span class="line"><span class="cl">├── README.md
</span></span><span class="line"><span class="cl">├── fpga
</span></span><span class="line"><span class="cl">├── script
</span></span><span class="line"><span class="cl">├── src
</span></span><span class="line"><span class="cl">└── tb
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">5</span> directories, <span class="m">3</span> files
</span></span></code></pre></div><p>マイクロプログラムを制御記憶に書き込むための COE ファイルを作成します．</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ curl -s http://www.ced.is.utsunomiya-u.ac.jp/lecture/2022/jikkenb/micro/chap5/MICROONE <span class="p">|</span> iconv -f sjis -t utf8 <span class="p">|</span> tr -d <span class="s2">&#34;\32&#34;</span> &gt; MICROONE
</span></span><span class="line"><span class="cl">$ rm1masm MICROONE -o MICROONE.o
</span></span><span class="line"><span class="cl">$ python script/obj2coe.py arty-a7-100 MICROONE.o fpga/arty-a7-100/control_program.coe
</span></span></code></pre></div><p>続いて，機械語プログラムを主記憶に書き込むための COE ファイルを作成します．</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ cat calculator 
</span></span><span class="line"><span class="cl"><span class="p">;</span> This program is distributed under MIT LICENSE.
</span></span><span class="line"><span class="cl"><span class="p">;</span> Copyright <span class="o">(</span>c<span class="o">)</span> <span class="m">2023</span> Kenta Arai
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">;</span> 逆ポーランド記法電卓プログラム
</span></span><span class="line"><span class="cl"><span class="p">;</span> 
</span></span><span class="line"><span class="cl"><span class="p">;</span> 実行例（<span class="o">(</span>3+4<span class="o">)</span>*<span class="o">(</span>4-2<span class="o">)</span>）
</span></span><span class="line"><span class="cl"><span class="p">;</span> <span class="o">(</span>CALCULATOR<span class="o">)</span>&gt;&gt; <span class="m">3</span> <span class="m">4</span> + <span class="m">4</span> <span class="m">2</span> - *
</span></span><span class="line"><span class="cl"><span class="p">;</span> <span class="m">14</span>
</span></span><span class="line"><span class="cl">TITLE CALCULATOR
</span></span><span class="line"><span class="cl">             ORG  <span class="m">140</span>
</span></span><span class="line"><span class="cl">CALCULATOR0: LA   1, PROMPT
</span></span><span class="line"><span class="cl">             BSR  PRINT
</span></span><span class="line"><span class="cl">             LA   1, INPUT
</span></span><span class="line"><span class="cl">             BSR  RWLINE
</span></span><span class="line"><span class="cl">             LA   0, INPUT
</span></span><span class="line"><span class="cl">             BSR  INTERPRET
</span></span><span class="line"><span class="cl">             BSR  PUTINT
</span></span><span class="line"><span class="cl">             B    CALCULATOR0
</span></span><span class="line"><span class="cl">             HLT
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">;</span> データ領域
</span></span><span class="line"><span class="cl">PROMPT:      DC   <span class="s1">&#39; (
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   &#39;</span> c
</span></span><span class="line"><span class="cl">             DC   <span class="s1">&#39; a
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   &#39;</span> l
</span></span><span class="line"><span class="cl">             DC   <span class="s1">&#39; c
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   &#39;</span> <span class="o">)</span>
</span></span><span class="line"><span class="cl">             DC   <span class="s1">&#39; &gt;
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   &#39;</span> &gt;
</span></span><span class="line"><span class="cl">             DC   <span class="s1">&#39;  
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   0
</span></span></span><span class="line"><span class="cl"><span class="s1">INPUT:       DS   32
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">; 文字列を出力装置に書き込む関数
</span></span></span><span class="line"><span class="cl"><span class="s1">; 入力: {r1: 文字列の先頭アドレス}
</span></span></span><span class="line"><span class="cl"><span class="s1">; 出力: なし
</span></span></span><span class="line"><span class="cl"><span class="s1">PRINT0:      WIO  LPT
</span></span></span><span class="line"><span class="cl"><span class="s1">             LEA  1, 1(1)
</span></span></span><span class="line"><span class="cl"><span class="s1">PRINT:       LX   0, (1)
</span></span></span><span class="line"><span class="cl"><span class="s1">             OR   0, (0)
</span></span></span><span class="line"><span class="cl"><span class="s1">             BNZ  PRINT0
</span></span></span><span class="line"><span class="cl"><span class="s1">             RET
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">; 入力装置から行を読む関数
</span></span></span><span class="line"><span class="cl"><span class="s1">; 入力: {r1: 行の書込み先アドレス}
</span></span></span><span class="line"><span class="cl"><span class="s1">; 出力: なし
</span></span></span><span class="line"><span class="cl"><span class="s1">; NOTE: 読んだ文字は都度出力装置に書き込む
</span></span></span><span class="line"><span class="cl"><span class="s1">RWLINE0:     STX  0, (1)
</span></span></span><span class="line"><span class="cl"><span class="s1">             LEA  1, 1(1)
</span></span></span><span class="line"><span class="cl"><span class="s1">RWLINE:      BSR  READWORD
</span></span></span><span class="line"><span class="cl"><span class="s1">             WIO  LPT
</span></span></span><span class="line"><span class="cl"><span class="s1">             LC   2, X&#34;0D
</span></span></span><span class="line"><span class="cl"><span class="s1">             CMP  0, (2)
</span></span></span><span class="line"><span class="cl"><span class="s1">             BNZ  RWLINE0
</span></span></span><span class="line"><span class="cl"><span class="s1">             WIO  LPT
</span></span></span><span class="line"><span class="cl"><span class="s1">             LC   0, X&#34;0A
</span></span></span><span class="line"><span class="cl"><span class="s1">             WIO  LPT
</span></span></span><span class="line"><span class="cl"><span class="s1">             LC   0, 0
</span></span></span><span class="line"><span class="cl"><span class="s1">             STX  0, (1)
</span></span></span><span class="line"><span class="cl"><span class="s1">             RET
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">; 入力式を計算する
</span></span></span><span class="line"><span class="cl"><span class="s1">; 入力: {r0: 入力文字列}
</span></span></span><span class="line"><span class="cl"><span class="s1">; 出力: {r1: 計算結果}
</span></span></span><span class="line"><span class="cl"><span class="s1">INTERPRET:   LX   1, (0)
</span></span></span><span class="line"><span class="cl"><span class="s1">             CMP  1, 0       ; NULL
</span></span></span><span class="line"><span class="cl"><span class="s1">             BZ   INTERPRET5
</span></span></span><span class="line"><span class="cl"><span class="s1">             CMP  1, X&#34;20    ; SP
</span></span></span><span class="line"><span class="cl"><span class="s1">             BZ   INTERPRET4
</span></span></span><span class="line"><span class="cl"><span class="s1">             CMP  1, X&#34;2B    ; +
</span></span></span><span class="line"><span class="cl"><span class="s1">             BNZ  INTERPRET0
</span></span></span><span class="line"><span class="cl"><span class="s1">             POP  3, 2
</span></span></span><span class="line"><span class="cl"><span class="s1">             ADD  2, (3)
</span></span></span><span class="line"><span class="cl"><span class="s1">             PUSH 2, 1
</span></span></span><span class="line"><span class="cl"><span class="s1">             B    INTERPRET4
</span></span></span><span class="line"><span class="cl"><span class="s1">INTERPRET0:  CMP  1, X&#34;2D    ; -
</span></span></span><span class="line"><span class="cl"><span class="s1">             BNZ  INTERPRET1
</span></span></span><span class="line"><span class="cl"><span class="s1">             POP  3, 2
</span></span></span><span class="line"><span class="cl"><span class="s1">             SUB  2, (3)
</span></span></span><span class="line"><span class="cl"><span class="s1">             PUSH 2, 1
</span></span></span><span class="line"><span class="cl"><span class="s1">             B    INTERPRET4
</span></span></span><span class="line"><span class="cl"><span class="s1">INTERPRET1:  CMP  1, X&#34;2A    ; *
</span></span></span><span class="line"><span class="cl"><span class="s1">             BNZ  INTERPRET2
</span></span></span><span class="line"><span class="cl"><span class="s1">             POP  3, 1
</span></span></span><span class="line"><span class="cl"><span class="s1">             POP  1, 1
</span></span></span><span class="line"><span class="cl"><span class="s1">             MULT 1, (3)
</span></span></span><span class="line"><span class="cl"><span class="s1">             PUSH 2, 1
</span></span></span><span class="line"><span class="cl"><span class="s1">             B    INTERPRET4
</span></span></span><span class="line"><span class="cl"><span class="s1">INTERPRET2:  CMP  1, X&#34;2F    ; /
</span></span></span><span class="line"><span class="cl"><span class="s1">             BNZ  INTERPRET3
</span></span></span><span class="line"><span class="cl"><span class="s1">             POP  3, 2
</span></span></span><span class="line"><span class="cl"><span class="s1">             LC   1, 0
</span></span></span><span class="line"><span class="cl"><span class="s1">             DIV  1, (3)
</span></span></span><span class="line"><span class="cl"><span class="s1">             PUSH 2, 1
</span></span></span><span class="line"><span class="cl"><span class="s1">             B    INTERPRET4
</span></span></span><span class="line"><span class="cl"><span class="s1">INTERPRET3:  BSR  ISDIGIT    ; &#39;</span>0<span class="s1">&#39;-&#39;</span>9<span class="s1">&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">             CMP  1, 0
</span></span></span><span class="line"><span class="cl"><span class="s1">             BZ   INTERPRET6
</span></span></span><span class="line"><span class="cl"><span class="s1">             BSR  ATOI
</span></span></span><span class="line"><span class="cl"><span class="s1">             PUSH 1, 1
</span></span></span><span class="line"><span class="cl"><span class="s1">INTERPRET4:  ADD  0, 1
</span></span></span><span class="line"><span class="cl"><span class="s1">             B    INTERPRET
</span></span></span><span class="line"><span class="cl"><span class="s1">INTERPRET5:  POP  1, 1
</span></span></span><span class="line"><span class="cl"><span class="s1">INTERPRET6:  RET
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">; 整数を出力装置に書き込む関数
</span></span></span><span class="line"><span class="cl"><span class="s1">; 入力: {r1: 数値}
</span></span></span><span class="line"><span class="cl"><span class="s1">; 出力: なし
</span></span></span><span class="line"><span class="cl"><span class="s1">PUTINT:      LC   0, X&#34;30
</span></span></span><span class="line"><span class="cl"><span class="s1">             WIO  LPT
</span></span></span><span class="line"><span class="cl"><span class="s1">             LC   0, X&#34;78
</span></span></span><span class="line"><span class="cl"><span class="s1">             WIO  LPT
</span></span></span><span class="line"><span class="cl"><span class="s1">             LEA  2, (1)    ; r1[15:12] を出���
</span></span></span><span class="line"><span class="cl"><span class="s1">             SC   2, 4
</span></span></span><span class="line"><span class="cl"><span class="s1">             AND  2, X&#34;F
</span></span></span><span class="line"><span class="cl"><span class="s1">             LA   3, DIGIT
</span></span></span><span class="line"><span class="cl"><span class="s1">             ADD  2, (3)
</span></span></span><span class="line"><span class="cl"><span class="s1">             LX   0, (2)
</span></span></span><span class="line"><span class="cl"><span class="s1">             WIO  LPT
</span></span></span><span class="line"><span class="cl"><span class="s1">             LEA  2, (1)    ; r1[11:8] を出力
</span></span></span><span class="line"><span class="cl"><span class="s1">             SC   2, 8
</span></span></span><span class="line"><span class="cl"><span class="s1">             AND  2, X&#34;F
</span></span></span><span class="line"><span class="cl"><span class="s1">             LA   3, DIGIT
</span></span></span><span class="line"><span class="cl"><span class="s1">             ADD  2, (3)
</span></span></span><span class="line"><span class="cl"><span class="s1">             LX   0, (2)
</span></span></span><span class="line"><span class="cl"><span class="s1">             WIO  LPT
</span></span></span><span class="line"><span class="cl"><span class="s1">             LEA  2, (1)    ; r1[7:4] を出力
</span></span></span><span class="line"><span class="cl"><span class="s1">             SC   2, 12
</span></span></span><span class="line"><span class="cl"><span class="s1">             AND  2, X&#34;F
</span></span></span><span class="line"><span class="cl"><span class="s1">             LA   3, DIGIT
</span></span></span><span class="line"><span class="cl"><span class="s1">             ADD  2, (3)
</span></span></span><span class="line"><span class="cl"><span class="s1">             LX   0, (2)
</span></span></span><span class="line"><span class="cl"><span class="s1">             WIO  LPT
</span></span></span><span class="line"><span class="cl"><span class="s1">             LEA  2, (1)    ; r1[3:0] を出力
</span></span></span><span class="line"><span class="cl"><span class="s1">             AND  2, X&#34;F
</span></span></span><span class="line"><span class="cl"><span class="s1">             LA   3, DIGIT
</span></span></span><span class="line"><span class="cl"><span class="s1">             ADD  2, (3)
</span></span></span><span class="line"><span class="cl"><span class="s1">             LX   0, (2)
</span></span></span><span class="line"><span class="cl"><span class="s1">             WIO  LPT
</span></span></span><span class="line"><span class="cl"><span class="s1">             LC   0, X&#34;0D
</span></span></span><span class="line"><span class="cl"><span class="s1">             WIO  LPT
</span></span></span><span class="line"><span class="cl"><span class="s1">             LC   0, X&#34;0A
</span></span></span><span class="line"><span class="cl"><span class="s1">             WIO  LPT
</span></span></span><span class="line"><span class="cl"><span class="s1">             RET
</span></span></span><span class="line"><span class="cl"><span class="s1">DIGIT:       DC   X&#34;30
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   X&#34;31
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   X&#34;32
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   X&#34;33
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   X&#34;34
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   X&#34;35
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   X&#34;36
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   X&#34;37
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   X&#34;38
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   X&#34;39
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   X&#34;41
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   X&#34;42
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   X&#34;43
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   X&#34;44
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   X&#34;45
</span></span></span><span class="line"><span class="cl"><span class="s1">             DC   X&#34;46
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">; 入力装置から文字を読む関数
</span></span></span><span class="line"><span class="cl"><span class="s1">; 入力: なし
</span></span></span><span class="line"><span class="cl"><span class="s1">; 出力: {r0: 読んだ文字}
</span></span></span><span class="line"><span class="cl"><span class="s1">; NOTE: MICRO-alpha は入力が無い場合にヌル文字を読んだ扱いとする
</span></span></span><span class="line"><span class="cl"><span class="s1">;       この関数はヌル文字以外を読むまで，入力装置から文字を読み続ける
</span></span></span><span class="line"><span class="cl"><span class="s1">READWORD:    RIO  CR
</span></span></span><span class="line"><span class="cl"><span class="s1">             OR   0, (0)
</span></span></span><span class="line"><span class="cl"><span class="s1">             BZ   READWORD
</span></span></span><span class="line"><span class="cl"><span class="s1">             RET
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">; 入力文字列を数値に変換する
</span></span></span><span class="line"><span class="cl"><span class="s1">; 入力: {r0: 入力文字列}
</span></span></span><span class="line"><span class="cl"><span class="s1">; 出力: {r0: 入力文字列(読み進めたアドレス), r1: 変換後の数値}
</span></span></span><span class="line"><span class="cl"><span class="s1">ATOI:        LC   1, 0
</span></span></span><span class="line"><span class="cl"><span class="s1">ATOI0:       PUSH 1, 1
</span></span></span><span class="line"><span class="cl"><span class="s1">             LX   1, (0)
</span></span></span><span class="line"><span class="cl"><span class="s1">             BSR  ISDIGIT
</span></span></span><span class="line"><span class="cl"><span class="s1">             CMP  1, 0
</span></span></span><span class="line"><span class="cl"><span class="s1">             POP  1, 1
</span></span></span><span class="line"><span class="cl"><span class="s1">             BNZ  ATOI1
</span></span></span><span class="line"><span class="cl"><span class="s1">             RET
</span></span></span><span class="line"><span class="cl"><span class="s1">ATOI1:       MULT 1, 10
</span></span></span><span class="line"><span class="cl"><span class="s1">             LX   1, (0)
</span></span></span><span class="line"><span class="cl"><span class="s1">             SUB  1, X&#34;30
</span></span></span><span class="line"><span class="cl"><span class="s1">             ADD  1, (2)
</span></span></span><span class="line"><span class="cl"><span class="s1">             ADD  0, 1
</span></span></span><span class="line"><span class="cl"><span class="s1">             B    ATOI0
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">; 入力文字が数字(&#39;</span>0<span class="s1">&#39;-&#39;</span>9<span class="err">&#39;</span><span class="o">)</span>であるかを判定する
</span></span><span class="line"><span class="cl"><span class="p">;</span> 入力: <span class="o">{</span>r1: 入力文字<span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="p">;</span> 出力: <span class="o">{</span>r1: 判定結果<span class="o">(</span>1: 数字である，0: 数字でない<span class="o">)}</span>
</span></span><span class="line"><span class="cl">ISDIGIT:     CMP  1, X<span class="s2">&#34;30
</span></span></span><span class="line"><span class="cl"><span class="s2">             BM   ISDIGIT0
</span></span></span><span class="line"><span class="cl"><span class="s2">             CMP  1, X&#34;</span><span class="m">39</span>
</span></span><span class="line"><span class="cl">             BP   ISDIGIT0
</span></span><span class="line"><span class="cl">             LC   1, <span class="m">1</span>
</span></span><span class="line"><span class="cl">             RET
</span></span><span class="line"><span class="cl">ISDIGIT0:    LC   1, <span class="m">0</span>
</span></span><span class="line"><span class="cl">             RET
</span></span><span class="line"><span class="cl">END
</span></span><span class="line"><span class="cl">$ rm1asm calculator -o calculator.b
</span></span><span class="line"><span class="cl">$ python script/obj2coe.py arty-a7-100 calculator.b fpga/arty-a7-100/machine_program.coe
</span></span></code></pre></div><p>make コマンドを実行すると，Vivado のプロジェクトが作成されます．</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ make all
</span></span><span class="line"><span class="cl">$ tree -L <span class="m">2</span> vivado
</span></span><span class="line"><span class="cl">vivado
</span></span><span class="line"><span class="cl">└── arty-a7-100
</span></span><span class="line"><span class="cl">    ├── arty-a7-100.cache
</span></span><span class="line"><span class="cl">    ├── arty-a7-100.gen
</span></span><span class="line"><span class="cl">    ├── arty-a7-100.hw
</span></span><span class="line"><span class="cl">    ├── arty-a7-100.ip_user_files
</span></span><span class="line"><span class="cl">    ├── arty-a7-100.srcs
</span></span><span class="line"><span class="cl">    └── arty-a7-100.xpr
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">7</span> directories, <span class="m">1</span> file
</span></span></code></pre></div><h3 id="fpga-上で逆ポーランド記法プログラムを動作させる">FPGA 上で逆ポーランド記法プログラムを動作させる<a href="#fpga-%e4%b8%8a%e3%81%a7%e9%80%86%e3%83%9d%e3%83%bc%e3%83%a9%e3%83%b3%e3%83%89%e8%a8%98%e6%b3%95%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%a0%e3%82%92%e5%8b%95%e4%bd%9c%e3%81%95%e3%81%9b%e3%82%8b" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<p>Vivado で回路を合成し，Arty A7-100 に書き込みましょう．
シリアル通信で Arty A7-100 にキーボード入力をしましょう．</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ sudo screen /dev/ttyUSB1 <span class="m">115200</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>calc<span class="o">)</span>&gt;&gt; <span class="m">3</span> <span class="m">4</span> + <span class="m">4</span> <span class="m">2</span> - *
</span></span><span class="line"><span class="cl">0x000E
</span></span><span class="line"><span class="cl"><span class="o">(</span>calc<span class="o">)</span>&gt;&gt; 
</span></span></code></pre></div><p>逆ポーランド記法の電卓で計算ができました！</p>
<h2 id="おわりに">おわりに<a href="#%e3%81%8a%e3%82%8f%e3%82%8a%e3%81%ab" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>今年度は MICRO-1 で散々遊びました．
もう遊びたくないですね．</p>
<p>何の役に立つのか分からない実装ですが，誰かしらに貢献できたら良いですね．
コンピュータ・アーキテクチャの歴史を学ぶ上で少しは参考になるのではないでしょうか．
なるのか？
ならなそう．</p>
]]></content></item><item><title>Operating System development tutorials in Rust on the Raspberry Pi をする #5</title><link>https://Kenta11.github.io/posts/2023-02-13-rust-raspberrypi-os-tutorials/</link><pubDate>Mon, 13 Feb 2023 23:00:00 +0900</pubDate><guid>https://Kenta11.github.io/posts/2023-02-13-rust-raspberrypi-os-tutorials/</guid><description>&amp;lt;no value&amp;gt;</description><content type="text/html" mode="escaped"><![CDATA[<h1 id="はじめに">はじめに<a href="#%e3%81%af%e3%81%98%e3%82%81%e3%81%ab" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h1>
<p><a href="../2023-02-02-rust-raspberrypi-os-tutorials">前回</a>の続きから．</p>
<h1 id="05_"><a href="https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials/tree/master/05_drivers_gpio_uart">05_drivers_gpio_uart</a><a href="#05_" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h1>
<h2 id="概要">概要<a href="#%e6%a6%82%e8%a6%81" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<ul>
<li>UART と GPIO のコントローラ用ドライバを追加する
<ul>
<li>これまでに作成した QEMU コンソールを捨てて， <code>ドライバマネージャ</code> を導入する</li>
</ul>
</li>
</ul>
<h2 id="ドライバマネージャ">ドライバマネージャ<a href="#%e3%83%89%e3%83%a9%e3%82%a4%e3%83%90%e3%83%9e%e3%83%8d%e3%83%bc%e3%82%b8%e3%83%a3" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<ul>
<li>
<p><code>ドライバサブシステム</code> をカーネルに追加</p>
<ul>
<li>参照：<code>src/driver.rs</code></li>
</ul>
</li>
<li>
<p><code>interface::DeviceDriver</code> トレイトは各デバイスドライバが実装する必要がある</p>
</li>
<li>
<p><code>crate::driver::driver_manager().init_drivers(...)</code> はドライバマネージャに全ての登録済みドライバをループさせ，初期化をキックし，オプションの <code>初期化後コールバック</code> も実行する</p>
</li>
</ul>
<h2 id="bsp-ドライバ実装">BSP ドライバ実装<a href="#bsp-%e3%83%89%e3%83%a9%e3%82%a4%e3%83%90%e5%ae%9f%e8%a3%85" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<ul>
<li>
<p><code>src/bsp/raspberrypi/driver.rs</code> の <code>init()</code> が <code>UART</code> と <code>GPIO</code> の登録の面倒をみる</p>
</li>
<li>
<p>ドライバは <code>src/bsp/device_driver</code> に保存されており，<code>BSP</code> が使用する</p>
</li>
<li>
<p>まず <code>PL011Uart</code> ドライバを追加する</p>
<ul>
<li><code>console::interface::*</code> トレイトを実装</li>
<li>メインシステムのコンソールとして使用</li>
</ul>
</li>
<li>
<p>次に <code>GPIO</code> ドライバを追加する</p>
<ul>
<li>このドキュメントでは Raspberry Pi 3 向けに <code>Makefile</code> が書かれている</li>
<li>Raspberry Pi 4 向けにビルドする場合は ターゲットに <code>BSP=rpi4</code> を指定
<ul>
<li>Raspberry Pi 3 しか持っていないので読み飛ばす</li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>BSP</code> は <code>src/bsp/raspberrypi/memory.rs</code> でメモリマップをもつ</p>
</li>
</ul>
<h2 id="sd-カードからブートする">SD カードからブートする<a href="#sd-%e3%82%ab%e3%83%bc%e3%83%89%e3%81%8b%e3%82%89%e3%83%96%e3%83%bc%e3%83%88%e3%81%99%e3%82%8b" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<ol>
<li><code>boot</code> という名前の <code>FAT32</code> のパーティションを作成</li>
<li>所定の内容の <code>config.txt</code> を作成</li>
<li><a href="https://github.com/raspberrypi/firmware/tree/master/ot">Raspberry Pi firmware repo</a> から <a href="https://github.com/raspberrypi/firmware/raw/master/boot/otcode.bin">bootcode.bin</a>, <a href="https://github.com/raspberrypi/firmware/raw/master/boot/xup.dat">fixup.dat</a>, <a href="https://github.com/raspberrypi/firmware/raw/master/boot/start.f">start.elf</a> をコピー</li>
<li><code>make</code> を実行</li>
<li><code>kernel8.img</code> をSDカードにコピーし，Raspberry Pi に挿入</li>
<li>シリアル通信端末で <code>UART</code> と接続</li>
<li>USB シリアルとホストPCを接続</li>
<li>Raspberry Pi を電源に接続し，出力を観察する</li>
</ol>
<h2 id="実行結果">実行結果<a href="#%e5%ae%9f%e8%a1%8c%e7%b5%90%e6%9e%9c" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ make
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Compiling kernel ELF - rpi3
</span></span><span class="line"><span class="cl">   Compiling mingo v0.5.0 <span class="o">(</span>/home/kenta/Git/Kenta11/rust-raspberrypi-OS-tutorials/05_drivers_gpio_uart<span class="o">)</span>
</span></span><span class="line"><span class="cl">   Compiling tock-registers v0.8.1
</span></span><span class="line"><span class="cl">   Compiling aarch64-cpu v9.0.0
</span></span><span class="line"><span class="cl">    Finished release <span class="o">[</span>optimized<span class="o">]</span> target<span class="o">(</span>s<span class="o">)</span> in 1.83s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Generating stripped binary
</span></span><span class="line"><span class="cl">        Name kernel8.img
</span></span><span class="line"><span class="cl">        Size <span class="m">10</span> KiB
</span></span><span class="line"><span class="cl">$ sudo make qemu
</span></span><span class="line"><span class="cl"><span class="o">[</span>sudo<span class="o">]</span> kenta のパスワード:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Launching QEMU
</span></span><span class="line"><span class="cl"><span class="o">[</span>0<span class="o">]</span> mingo version 0.5.0
</span></span><span class="line"><span class="cl"><span class="o">[</span>1<span class="o">]</span> Booting on: Raspberry Pi <span class="m">3</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>2<span class="o">]</span> Drivers loaded:
</span></span><span class="line"><span class="cl">      1. BCM PL011 UART
</span></span><span class="line"><span class="cl">      2. BCM GPIO
</span></span><span class="line"><span class="cl"><span class="o">[</span>3<span class="o">]</span> Chars written: <span class="m">117</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>4<span class="o">]</span> Echoing input now
</span></span></code></pre></div>]]></content></item><item><title>Operating System development tutorials in Rust on the Raspberry Pi をする #4</title><link>https://Kenta11.github.io/posts/2023-02-02-rust-raspberrypi-os-tutorials/</link><pubDate>Thu, 02 Feb 2023 21:00:00 +0900</pubDate><guid>https://Kenta11.github.io/posts/2023-02-02-rust-raspberrypi-os-tutorials/</guid><description>&amp;lt;no value&amp;gt;</description><content type="text/html" mode="escaped"><![CDATA[<h1 id="はじめに">はじめに<a href="#%e3%81%af%e3%81%98%e3%82%81%e3%81%ab" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h1>
<p><a href="../2023-02-01-rust-raspberrypi-os-tutorials">前回</a>の続きから．</p>
<h1 id="04_"><a href="https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials/tree/master/04_safe_globals">04_safe_globals</a><a href="#04_" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h1>
<h2 id="概要">概要<a href="#%e6%a6%82%e8%a6%81" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<ul>
<li>
<p>疑似ロックを導入する話</p>
</li>
<li>
<p>global data structure に対して安全にアクセスするための OS 同期プリミティブの showcase（ショーケースってなんだろう）</p>
</li>
<li>
<p>safe Rust では <code>static mut</code> なグローバル変数を定義できないので，この章で排他制御の機能を導入し，変更可能なグローバル変数を実現する</p>
</li>
</ul>
<h2 id="実行結果">実行結果<a href="#%e5%ae%9f%e8%a1%8c%e7%b5%90%e6%9e%9c" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ make
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Compiling kernel ELF - rpi3
</span></span><span class="line"><span class="cl">   Compiling mingo v0.4.0 <span class="o">(</span>/home/kenta/Git/Kenta11/rust-raspberrypi-OS-tutorials/04_safe_globals<span class="o">)</span>
</span></span><span class="line"><span class="cl">   Compiling tock-registers v0.8.1
</span></span><span class="line"><span class="cl">   Compiling aarch64-cpu v9.0.0
</span></span><span class="line"><span class="cl">    Finished release <span class="o">[</span>optimized<span class="o">]</span> target<span class="o">(</span>s<span class="o">)</span> in 6.09s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Generating stripped binary
</span></span><span class="line"><span class="cl">        Name kernel8.img
</span></span><span class="line"><span class="cl">        Size <span class="m">7</span> KiB
</span></span><span class="line"><span class="cl">$ sudo make <span class="nb">test</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>sudo<span class="o">]</span> kenta のパスワード:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Boot <span class="nb">test</span> - rpi3
</span></span><span class="line"><span class="cl">         -------------------------------------------------------------------
</span></span><span class="line"><span class="cl">         🦀 Running <span class="m">1</span> console I/O tests
</span></span><span class="line"><span class="cl">         -------------------------------------------------------------------
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">           1. Checking <span class="k">for</span> the string: <span class="s1">&#39;Stopping here&#39;</span>..................<span class="o">[</span>ok<span class="o">]</span>
</span></span><span class="line"><span class="cl">         
</span></span><span class="line"><span class="cl">         Console log:
</span></span><span class="line"><span class="cl">           <span class="o">[</span>0<span class="o">]</span> Hello from Rust!
</span></span><span class="line"><span class="cl">           <span class="o">[</span>1<span class="o">]</span> Chars written: <span class="m">22</span>
</span></span><span class="line"><span class="cl">           <span class="o">[</span>2<span class="o">]</span> Stopping here
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">         -------------------------------------------------------------------
</span></span><span class="line"><span class="cl">         ✅ Success: Boot <span class="nb">test</span>
</span></span><span class="line"><span class="cl">         -------------------------------------------------------------------
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ sudo make qemu
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Launching QEMU
</span></span><span class="line"><span class="cl"><span class="o">[</span>0<span class="o">]</span> Hello from Rust!
</span></span><span class="line"><span class="cl"><span class="o">[</span>1<span class="o">]</span> Chars written: <span class="m">22</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>2<span class="o">]</span> Stopping here.
</span></span></code></pre></div>]]></content></item><item><title>Operating System development tutorials in Rust on the Raspberry Pi をする #3</title><link>https://Kenta11.github.io/posts/2023-02-01-rust-raspberrypi-os-tutorials/</link><pubDate>Wed, 01 Feb 2023 22:52:52 +0900</pubDate><guid>https://Kenta11.github.io/posts/2023-02-01-rust-raspberrypi-os-tutorials/</guid><description>&amp;lt;no value&amp;gt;</description><content type="text/html" mode="escaped"><![CDATA[<h1 id="はじめに">はじめに<a href="#%e3%81%af%e3%81%98%e3%82%81%e3%81%ab" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h1>
<p><a href="../2023-01-31-rust-raspberrypi-os-tutorials">前回</a>の続きから．</p>
<h1 id="03_"><a href="https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials/tree/master/03_hacky_hello_world">03_hacky_hello_world</a><a href="#03_" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h1>
<ul>
<li>QEMU がエミュレートする UART を介して，<code>println!</code> マクロで文字列を表示できるようにする
<ul>
<li><code>console::console</code> 関数は <code>core::fmt::Write</code> トレイトを実装した構造体を返す (<code>src/bsp/raspberrypi.rs</code>)
<ul>
<li>このトレイトは <code>write_str</code>, <code>write_char</code>, <code>write_fmt</code> 関数をもつ</li>
</ul>
</li>
<li><code>write_str</code> 関数は UART（アドレスが0x3F201000）に一文字ずつ書き込む (<code>src/console.rs</code>)</li>
<li><code>print!</code> と <code>println!</code> はそれぞれ <code>write_fmt</code> 関数を呼び出す（<code>src/print.rs</code>）
<ul>
<li><code>write_str</code> を実装すると <code>write_fmt</code> も自動的に実装されるのか？</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="実行結果">実行結果<a href="#%e5%ae%9f%e8%a1%8c%e7%b5%90%e6%9e%9c" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ make
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Compiling kernel ELF - rpi3
</span></span><span class="line"><span class="cl">   Compiling tock-registers v0.8.1
</span></span><span class="line"><span class="cl">   Compiling mingo v0.3.0 <span class="o">(</span>/home/kenta/Git/Kenta11/rust-raspberrypi-OS-tutorials/03_hacky_hello_world<span class="o">)</span>
</span></span><span class="line"><span class="cl">   Compiling aarch64-cpu v9.0.0
</span></span><span class="line"><span class="cl">    Finished release <span class="o">[</span>optimized<span class="o">]</span> target<span class="o">(</span>s<span class="o">)</span> in 3.88s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Generating stripped binary
</span></span><span class="line"><span class="cl">        Name kernel8.img
</span></span><span class="line"><span class="cl">        Size <span class="m">6</span> KiB
</span></span><span class="line"><span class="cl">$ make <span class="nb">test</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Boot <span class="nb">test</span> - rpi3
</span></span><span class="line"><span class="cl">docker: Got permission denied <span class="k">while</span> trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post <span class="s2">&#34;http://%2Fvar%2Frun%2Fdocker.sock/v1.24/containers/create&#34;</span>: dial unix /var/run/docker.sock: connect: permission denied.
</span></span><span class="line"><span class="cl">See <span class="s1">&#39;docker run --help&#39;</span>.
</span></span><span class="line"><span class="cl">make: *** <span class="o">[</span>Makefile:216: test_boot<span class="o">]</span> エラー <span class="m">126</span>
</span></span><span class="line"><span class="cl">$ sudo make <span class="nb">test</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>sudo<span class="o">]</span> kenta のパスワード:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Boot <span class="nb">test</span> - rpi3
</span></span><span class="line"><span class="cl">         -------------------------------------------------------------------
</span></span><span class="line"><span class="cl">         🦀 Running <span class="m">1</span> console I/O tests
</span></span><span class="line"><span class="cl">         -------------------------------------------------------------------
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">           1. Checking <span class="k">for</span> the string: <span class="s1">&#39;Stopping here&#39;</span>..................<span class="o">[</span>ok<span class="o">]</span>
</span></span><span class="line"><span class="cl">         
</span></span><span class="line"><span class="cl">         Console log:
</span></span><span class="line"><span class="cl">           Hello from Rust!
</span></span><span class="line"><span class="cl">           Kernel panic!
</span></span><span class="line"><span class="cl">           
</span></span><span class="line"><span class="cl">           Panic location:
</span></span><span class="line"><span class="cl">                 File <span class="s1">&#39;src/main.rs&#39;</span>, line 129, column <span class="m">5</span>
</span></span><span class="line"><span class="cl">           
</span></span><span class="line"><span class="cl">           Stopping here
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">         -------------------------------------------------------------------
</span></span><span class="line"><span class="cl">         ✅ Success: Boot <span class="nb">test</span>
</span></span><span class="line"><span class="cl">         -------------------------------------------------------------------
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ sudo make qemu
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Launching QEMU
</span></span><span class="line"><span class="cl">Hello from Rust!
</span></span><span class="line"><span class="cl">Kernel panic!
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Panic location:
</span></span><span class="line"><span class="cl">      File <span class="s1">&#39;src/main.rs&#39;</span>, line 129, column <span class="m">5</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Stopping here.
</span></span></code></pre></div>]]></content></item><item><title>Operating System development tutorials in Rust on the Raspberry Pi をする #2</title><link>https://Kenta11.github.io/posts/2023-01-31-rust-raspberrypi-os-tutorials/</link><pubDate>Tue, 31 Jan 2023 22:17:41 +0900</pubDate><guid>https://Kenta11.github.io/posts/2023-01-31-rust-raspberrypi-os-tutorials/</guid><description>&amp;lt;no value&amp;gt;</description><content type="text/html" mode="escaped"><![CDATA[<h1 id="はじめに">はじめに<a href="#%e3%81%af%e3%81%98%e3%82%81%e3%81%ab" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h1>
<p><a href="../2023-01-30-rust-raspberrypi-os-tutorials">前回</a>の続きから．</p>
<h1 id="02_"><a href="https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials/tree/master/02_runtime_init">02_runtime_init</a><a href="#02_" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h1>
<ul>
<li><code>_start</code> で主記憶の初期化を行う</li>
<li>初期化後に <code>_start_rust</code>（<code>src/_arch/aarch64/cpu/boot.rs</code>）にエントリし，<code>kernel_init</code>（<code>src/main.rs</code>）を実行する</li>
</ul>
<h2 id="セクションの構成">セクションの構成<a href="#%e3%82%bb%e3%82%af%e3%82%b7%e3%83%a7%e3%83%b3%e3%81%ae%e6%a7%8b%e6%88%90" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<ul>
<li>
<p>DRAM の先頭アドレスは 0x80000</p>
</li>
<li>
<p>以下，リンカスクリプトで指定されているセクション</p>
</li>
<li>
<p>.boot_core_stack：boot 用のスタック？</p>
</li>
<li>
<p>.text：機械語命令列</p>
</li>
<li>
<p>.rodata：read-only データ．8バイトアラインされている．</p>
</li>
<li>
<p>.data：読み書き可能なデータ領域．初期化されない．</p>
</li>
<li>
<p>.bss：読み書き可能なデータ領域．初期化される．16バイトアラインされている．</p>
</li>
<li>
<p>.got：何に使うのか分からない</p>
</li>
</ul>
<h2 id="bootrs">boot.rs<a href="#bootrs" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<ul>
<li><code>MPIDR_EL1</code>：<code>PE (Processor Element)</code> を識別するためのレジスタ</li>
<li><code>CONST_CORE_ID_MASK</code> は <code>src/_arch/aarch64/cpu/boot.rs</code> で定義されている定数か
<ul>
<li>0b11 なので 3番目の PE が boot core として初期化処理を行う</li>
<li>他の PE は <code>L_parking_loop</code> で無限ループ（=何もさせない）</li>
</ul>
</li>
<li>x0, x1 レジスタにそれぞれ <code>__bss_start</code>, <code>__bss_end_exclusive</code> をセット</li>
<li>.bss をゼロ埋め
<ul>
<li>アセンブリ命令：<code>stp	xzr, xzr, [x0], #16</code>
<ul>
<li>stp: レジスタペアの内容を主記憶に書き込み</li>
<li>xzr: ゼロレジスタ</li>
<li>[x0]: 書き込み先のポインタ</li>
<li>#16: 書き込み先アドレスへのオフセット
<ul>
<li>stp 命令による書き込み後，x0 += 16 される</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><code>.L_prepare_rust</code> 以降
<ul>
<li>スタックポインタを機械語命令列の先頭へセット</li>
<li><code>_start_rust</code> へ分岐</li>
</ul>
</li>
</ul>
<h1 id="実行結果">実行結果<a href="#%e5%ae%9f%e8%a1%8c%e7%b5%90%e6%9e%9c" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h1>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ make
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Compiling kernel ELF - rpi3
</span></span><span class="line"><span class="cl">   Compiling tock-registers v0.8.1
</span></span><span class="line"><span class="cl">   Compiling mingo v0.2.0 <span class="o">(</span>/home/kenta/Git/Kenta11/rust-raspberrypi-OS-tutorials/02_runtime_init<span class="o">)</span>
</span></span><span class="line"><span class="cl">   Compiling aarch64-cpu v9.0.0
</span></span><span class="line"><span class="cl">    Finished release <span class="o">[</span>optimized<span class="o">]</span> target<span class="o">(</span>s<span class="o">)</span> in 5.86s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Generating stripped binary
</span></span><span class="line"><span class="cl">        Name kernel8.img
</span></span><span class="line"><span class="cl">        Size <span class="m">1</span> KiB
</span></span><span class="line"><span class="cl">$ sudo make qemu
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Launching QEMU
</span></span><span class="line"><span class="cl">----------------
</span></span><span class="line"><span class="cl">IN: 
</span></span><span class="line"><span class="cl">0x00000300:  d2801b05  mov      x5, <span class="c1">#0xd8</span>
</span></span><span class="line"><span class="cl">0x00000304:  d53800a6  mrs      x6, mpidr_el1
</span></span><span class="line"><span class="cl">0x00000308:  924004c6  and      x6, x6, <span class="c1">#3</span>
</span></span><span class="line"><span class="cl">0x0000030c:  d503205f  wfe      
</span></span><span class="line"><span class="cl">0x00000310:  f86678a4  ldr      x4, <span class="o">[</span>x5, x6, lsl <span class="c1">#3]</span>
</span></span><span class="line"><span class="cl">0x00000314:  b4ffffc4  cbz      x4, <span class="c1">#0x30c</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">----------------
</span></span><span class="line"><span class="cl">IN: 
</span></span><span class="line"><span class="cl">0x00000300:  d2801b05  mov      x5, <span class="c1">#0xd8</span>
</span></span><span class="line"><span class="cl">0x00000304:  d53800a6  mrs      x6, mpidr_el1
</span></span><span class="line"><span class="cl">0x00000308:  924004c6  and      x6, x6, <span class="c1">#3</span>
</span></span><span class="line"><span class="cl">0x0000030c:  d503205f  wfe      
</span></span><span class="line"><span class="cl">0x00000310:  f86678a4  ldr      x4, <span class="o">[</span>x5, x6, lsl <span class="c1">#3]</span>
</span></span><span class="line"><span class="cl">0x00000314:  b4ffffc4  cbz      x4, <span class="c1">#0x30c</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">----------------
</span></span><span class="line"><span class="cl">IN: 
</span></span><span class="line"><span class="cl">0x00000000:  580000c0  ldr      x0, <span class="c1">#0x18</span>
</span></span><span class="line"><span class="cl">0x00000004:  aa1f03e1  mov      x1, xzr
</span></span><span class="line"><span class="cl">0x00000008:  aa1f03e2  mov      x2, xzr
</span></span><span class="line"><span class="cl">0x0000000c:  aa1f03e3  mov      x3, xzr
</span></span><span class="line"><span class="cl">0x00000010:  <span class="m">58000084</span>  ldr      x4, <span class="c1">#0x20</span>
</span></span><span class="line"><span class="cl">0x00000014:  d61f0080  br       x4
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">----------------
</span></span><span class="line"><span class="cl">IN: 
</span></span><span class="line"><span class="cl">0x00000300:  d2801b05  mov      x5, <span class="c1">#0xd8</span>
</span></span><span class="line"><span class="cl">0x00000304:  d53800a6  mrs      x6, mpidr_el1
</span></span><span class="line"><span class="cl">0x00000308:  924004c6  and      x6, x6, <span class="c1">#3</span>
</span></span><span class="line"><span class="cl">0x0000030c:  d503205f  wfe      
</span></span><span class="line"><span class="cl">0x00000310:  f86678a4  ldr      x4, <span class="o">[</span>x5, x6, lsl <span class="c1">#3]</span>
</span></span><span class="line"><span class="cl">0x00000314:  b4ffffc4  cbz      x4, <span class="c1">#0x30c</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">----------------
</span></span><span class="line"><span class="cl">IN: 
</span></span><span class="line"><span class="cl">0x0000030c:  d503205f  wfe      
</span></span><span class="line"><span class="cl">0x00000310:  f86678a4  ldr      x4, <span class="o">[</span>x5, x6, lsl <span class="c1">#3]</span>
</span></span><span class="line"><span class="cl">0x00000314:  b4ffffc4  cbz      x4, <span class="c1">#0x30c</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">----------------
</span></span><span class="line"><span class="cl">IN: 
</span></span><span class="line"><span class="cl">0x0000030c:  d503205f  wfe      
</span></span><span class="line"><span class="cl">0x00000310:  f86678a4  ldr      x4, <span class="o">[</span>x5, x6, lsl <span class="c1">#3]</span>
</span></span><span class="line"><span class="cl">0x00000314:  b4ffffc4  cbz      x4, <span class="c1">#0x30c</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">----------------
</span></span><span class="line"><span class="cl">IN: 
</span></span><span class="line"><span class="cl">0x00080000:  d53800a0  mrs      x0, mpidr_el1
</span></span><span class="line"><span class="cl">0x00080004:  <span class="m">92400400</span>  and      x0, x0, <span class="c1">#3</span>
</span></span><span class="line"><span class="cl">0x00080008:  <span class="m">58000241</span>  ldr      x1, <span class="c1">#0x80050</span>
</span></span><span class="line"><span class="cl">0x0008000c:  eb01001f  cmp      x0, x1
</span></span><span class="line"><span class="cl">0x00080010:  540001a1  b.ne     <span class="c1">#0x80044</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">----------------
</span></span><span class="line"><span class="cl">IN: 
</span></span><span class="line"><span class="cl">0x0000030c:  d503205f  wfe      
</span></span><span class="line"><span class="cl">0x00000310:  f86678a4  ldr      x4, <span class="o">[</span>x5, x6, lsl <span class="c1">#3]</span>
</span></span><span class="line"><span class="cl">0x00000314:  b4ffffc4  cbz      x4, <span class="c1">#0x30c</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">----------------
</span></span><span class="line"><span class="cl">IN: 
</span></span><span class="line"><span class="cl">0x00080014:  d503201f  nop      
</span></span><span class="line"><span class="cl">0x00080018:  <span class="m">10000440</span>  adr      x0, <span class="c1">#0x800a0</span>
</span></span><span class="line"><span class="cl">0x0008001c:  d503201f  nop      
</span></span><span class="line"><span class="cl">0x00080020:  <span class="m">10000401</span>  adr      x1, <span class="c1">#0x800a0</span>
</span></span><span class="line"><span class="cl">0x00080024:  eb01001f  cmp      x0, x1
</span></span><span class="line"><span class="cl">0x00080028:  <span class="m">54000060</span>  b.eq     <span class="c1">#0x80034</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">----------------
</span></span><span class="line"><span class="cl">IN: 
</span></span><span class="line"><span class="cl">0x00080034:  d503201f  nop      
</span></span><span class="line"><span class="cl">0x00080038:  10fffe40  adr      x0, <span class="c1">#0x80000</span>
</span></span><span class="line"><span class="cl">0x0008003c:  9100001f  mov      sp, x0
</span></span><span class="line"><span class="cl">0x00080040:  <span class="m">14000008</span>  b        <span class="c1">#0x80060</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">----------------
</span></span><span class="line"><span class="cl">IN: 
</span></span><span class="line"><span class="cl">0x00080060:  <span class="m">94000004</span>  bl       <span class="c1">#0x80070</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">----------------
</span></span><span class="line"><span class="cl">IN: 
</span></span><span class="line"><span class="cl">0x00080070:  <span class="m">94000004</span>  bl       <span class="c1">#0x80080</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">----------------
</span></span><span class="line"><span class="cl">IN: 
</span></span><span class="line"><span class="cl">0x00080080:  97fffffe  bl       <span class="c1">#0x80078</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">----------------
</span></span><span class="line"><span class="cl">IN: 
</span></span><span class="line"><span class="cl">0x00080078:  <span class="m">94000006</span>  bl       <span class="c1">#0x80090</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">----------------
</span></span><span class="line"><span class="cl">IN: 
</span></span><span class="line"><span class="cl">0x00080090:  d503205f  wfe      
</span></span><span class="line"><span class="cl">0x00080094:  17ffffff  b        <span class="c1">#0x80090</span>
</span></span></code></pre></div><h1 id="感想">感想<a href="#%e6%84%9f%e6%83%b3" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h1>
<ul>
<li>Rust コードを実行できるようになったので，いよいよ Rust で書いた OS の機能で遊べそうだ</li>
<li>stp が一命令で色々できることにビックリした
<ul>
<li>MIPS や RISC-V の方が慣れているので，ARM が CISC プロセッサのように思えてしまう</li>
</ul>
</li>
</ul>
]]></content></item><item><title>Operating System development tutorials in Rust on the Raspberry Pi をする #1</title><link>https://Kenta11.github.io/posts/2023-01-30-rust-raspberrypi-os-tutorials/</link><pubDate>Mon, 30 Jan 2023 22:30:15 +0900</pubDate><guid>https://Kenta11.github.io/posts/2023-01-30-rust-raspberrypi-os-tutorials/</guid><description>&amp;lt;no value&amp;gt;</description><content type="text/html" mode="escaped"><![CDATA[<h1 id="はじめに">はじめに<a href="#%e3%81%af%e3%81%98%e3%82%81%e3%81%ab" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h1>
<p>Rust で Raspberry Pi 向けのオペレーティングシステムを開発する<a href="https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials">チュートリアル</a>が公開されている．
早速やってみよう．</p>
<h1 id="00_"><a href="https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials/tree/master/00_before_we_start">00_before_we_start</a><a href="#00_" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h1>
<ul>
<li>プロセッサ・アーキテクチャ固有のソースコードは <code>src/_arch</code> に配置される
<ul>
<li>例：<code>aarch64</code> 向けのコードは <code>src/_arch/aarch64</code> に置かれる</li>
</ul>
</li>
<li>ボード固有のソースコードは <code>src/bsp.rs</code> に書かれる</li>
<li>「アーキテクチャとボード」とカーネルは，トレイトで抽象化されたインターフェースで分離される
<ul>
<li>クリーンな抽象を提供する</li>
</ul>
</li>
<li>boot の流れ
<ul>
<li>エントリポイントは <code>cpu::boot::arch_boot::_start()</code> (<code>src/_arch/__arch_name__/cpu/boot.s</code>)</li>
</ul>
</li>
</ul>
<h1 id="01_"><a href="https://github.com/rust-embedded/rust-raspberrypi-OS-tutorials/tree/master/01_wait_forever">01_wait_forever</a><a href="#01_" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h1>
<ul>
<li>すべての CPU コアを halt させるプロジェクト
<ul>
<li>Rust コードにはほとんど処理が記述されていない
<ul>
<li>モジュールの定義やアセンブリコード (<code>src/_arch/aarch64/cpu/boot.rs</code>)，パニックの定義 (<code>src/cpu/panic_wait.rs</code>) など</li>
</ul>
</li>
<li>OS は qemu で実行できるようだ</li>
</ul>
</li>
<li>qemu で OS を動かしてみよう</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ make qemu
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Compiling kernel ELF - rpi3
</span></span><span class="line"><span class="cl">   Compiling mingo v0.1.0 <span class="o">(</span>/home/kenta/Git/Kenta11/rust-raspberrypi-OS-tutorials/01_wait_forever<span class="o">)</span>
</span></span><span class="line"><span class="cl">    Finished release <span class="o">[</span>optimized<span class="o">]</span> target<span class="o">(</span>s<span class="o">)</span> in 0.32s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Generating stripped binary
</span></span><span class="line"><span class="cl">make: rust-objcopy: そのようなファイルやディレクトリはありません
</span></span><span class="line"><span class="cl">make: *** <span class="o">[</span>Makefile:130: kernel8.img<span class="o">]</span> エラー <span class="m">127</span>
</span></span></code></pre></div><ul>
<li><code>rust-objcopy</code> が無いと言われた</li>
<li><code>rust-objcopy</code> は <a href="https://github.com/rust-embedded/cargo-binutils">cargo-binutils</a> に含まれるコマンドのようだ
<ul>
<li>LLVM のツールチェインを呼び出すコマンドっぽい？</li>
</ul>
</li>
<li>インストールして再度 OS を動かそう</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ cargo install cargo-binutils
</span></span><span class="line"><span class="cl">（とても時間がかかる）
</span></span><span class="line"><span class="cl">$ make qemu
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Generating stripped binary
</span></span><span class="line"><span class="cl">        Name kernel8.img
</span></span><span class="line"><span class="cl">        Size <span class="m">1</span> KiB
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Launching QEMU
</span></span><span class="line"><span class="cl">docker: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?.
</span></span><span class="line"><span class="cl">See <span class="s1">&#39;docker run --help&#39;</span>.
</span></span><span class="line"><span class="cl">make: *** <span class="o">[</span>Makefile:155: qemu<span class="o">]</span> エラー <span class="m">125</span>
</span></span></code></pre></div><ul>
<li>docker も動かさないといけないらしい</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ sudo systemctl restart docker
</span></span><span class="line"><span class="cl">$ make qemu
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Launching QEMU
</span></span><span class="line"><span class="cl">docker: Got permission denied <span class="k">while</span> trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post <span class="s2">&#34;http://%2Fvar%2Frun%2Fdocker.sock/v1.24/containers/create&#34;</span>: dial unix /var/run/docker.sock: connect: permission denied.
</span></span><span class="line"><span class="cl">See <span class="s1">&#39;docker run --help&#39;</span>.
</span></span><span class="line"><span class="cl">make: *** <span class="o">[</span>Makefile:155: qemu<span class="o">]</span> エラー <span class="m">126</span>
</span></span></code></pre></div><ul>
<li>管理者権限まで必要なのか&hellip;（docker を使う以上当たり前だが）</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ sudo make qemu
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Launching QEMU
</span></span><span class="line"><span class="cl">Unable to find image <span class="s1">&#39;rustembedded/osdev-utils:2021.12&#39;</span> locally
</span></span><span class="line"><span class="cl">2021.12: Pulling from rustembedded/osdev-utils
</span></span><span class="line"><span class="cl">7b1a6ab2e44d: Pull <span class="nb">complete</span> 
</span></span><span class="line"><span class="cl">292c6ce995b4: Pull <span class="nb">complete</span> 
</span></span><span class="line"><span class="cl">afb6c3c2887b: Pull <span class="nb">complete</span> 
</span></span><span class="line"><span class="cl">888e016a338b: Pull <span class="nb">complete</span> 
</span></span><span class="line"><span class="cl">59ca2d6f9c6f: Pull <span class="nb">complete</span> 
</span></span><span class="line"><span class="cl">1ac893ad5b73: Pull <span class="nb">complete</span> 
</span></span><span class="line"><span class="cl">008bb9e6650e: Pull <span class="nb">complete</span> 
</span></span><span class="line"><span class="cl">Digest: sha256:9883c96e0e827e35b8d716683f85c7a9b8ffed85422fe418ed080d61e8641e78
</span></span><span class="line"><span class="cl">Status: Downloaded newer image <span class="k">for</span> rustembedded/osdev-utils:2021.12
</span></span><span class="line"><span class="cl">----------------
</span></span><span class="line"><span class="cl">IN: 
</span></span><span class="line"><span class="cl">0x00000000:  580000c0  ldr      x0, <span class="c1">#0x18</span>
</span></span><span class="line"><span class="cl">0x00000004:  aa1f03e1  mov      x1, xzr
</span></span><span class="line"><span class="cl">0x00000008:  aa1f03e2  mov      x2, xzr
</span></span><span class="line"><span class="cl">0x0000000c:  aa1f03e3  mov      x3, xzr
</span></span><span class="line"><span class="cl">0x00000010:  <span class="m">58000084</span>  ldr      x4, <span class="c1">#0x20</span>
</span></span><span class="line"><span class="cl">0x00000014:  d61f0080  br       x4
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">----------------
</span></span><span class="line"><span class="cl">IN: 
</span></span><span class="line"><span class="cl">0x00000300:  d2801b05  mov      x5, <span class="c1">#0xd8</span>
</span></span><span class="line"><span class="cl">0x00000304:  d53800a6  mrs      x6, mpidr_el1
</span></span><span class="line"><span class="cl">0x00000308:  924004c6  and      x6, x6, <span class="c1">#3</span>
</span></span><span class="line"><span class="cl">0x0000030c:  d503205f  wfe      
</span></span><span class="line"><span class="cl">0x00000310:  f86678a4  ldr      x4, <span class="o">[</span>x5, x6, lsl <span class="c1">#3]</span>
</span></span><span class="line"><span class="cl">0x00000314:  b4ffffc4  cbz      x4, <span class="c1">#0x30c</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">----------------
</span></span><span class="line"><span class="cl">IN: 
</span></span><span class="line"><span class="cl">0x00000300:  d2801b05  mov      x5, <span class="c1">#0xd8</span>
</span></span><span class="line"><span class="cl">0x00000304:  d53800a6  mrs      x6, mpidr_el1
</span></span><span class="line"><span class="cl">0x00000308:  924004c6  and      x6, x6, <span class="c1">#3</span>
</span></span><span class="line"><span class="cl">0x0000030c:  d503205f  wfe      
</span></span><span class="line"><span class="cl">0x00000310:  f86678a4  ldr      x4, <span class="o">[</span>x5, x6, lsl <span class="c1">#3]</span>
</span></span><span class="line"><span class="cl">0x00000314:  b4ffffc4  cbz      x4, <span class="c1">#0x30c</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">----------------
</span></span><span class="line"><span class="cl">IN: 
</span></span><span class="line"><span class="cl">0x00000300:  d2801b05  mov      x5, <span class="c1">#0xd8</span>
</span></span><span class="line"><span class="cl">0x00000304:  d53800a6  mrs      x6, mpidr_el1
</span></span><span class="line"><span class="cl">0x00000308:  924004c6  and      x6, x6, <span class="c1">#3</span>
</span></span><span class="line"><span class="cl">0x0000030c:  d503205f  wfe      
</span></span><span class="line"><span class="cl">0x00000310:  f86678a4  ldr      x4, <span class="o">[</span>x5, x6, lsl <span class="c1">#3]</span>
</span></span><span class="line"><span class="cl">0x00000314:  b4ffffc4  cbz      x4, <span class="c1">#0x30c</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">----------------
</span></span><span class="line"><span class="cl">IN: 
</span></span><span class="line"><span class="cl">0x00080000:  d503205f  wfe      
</span></span><span class="line"><span class="cl">0x00080004:  17ffffff  b        <span class="c1">#0x80000</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">----------------
</span></span><span class="line"><span class="cl">IN: 
</span></span><span class="line"><span class="cl">0x0000030c:  d503205f  wfe      
</span></span><span class="line"><span class="cl">0x00000310:  f86678a4  ldr      x4, <span class="o">[</span>x5, x6, lsl <span class="c1">#3]</span>
</span></span><span class="line"><span class="cl">0x00000314:  b4ffffc4  cbz      x4, <span class="c1">#0x30c</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">----------------
</span></span><span class="line"><span class="cl">IN: 
</span></span><span class="line"><span class="cl">0x0000030c:  d503205f  wfe      
</span></span><span class="line"><span class="cl">0x00000310:  f86678a4  ldr      x4, <span class="o">[</span>x5, x6, lsl <span class="c1">#3]</span>
</span></span><span class="line"><span class="cl">0x00000314:  b4ffffc4  cbz      x4, <span class="c1">#0x30c</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">----------------
</span></span><span class="line"><span class="cl">IN: 
</span></span><span class="line"><span class="cl">0x0000030c:  d503205f  wfe      
</span></span><span class="line"><span class="cl">0x00000310:  f86678a4  ldr      x4, <span class="o">[</span>x5, x6, lsl <span class="c1">#3]</span>
</span></span><span class="line"><span class="cl">0x00000314:  b4ffffc4  cbz      x4, <span class="c1">#0x30c</span>
</span></span></code></pre></div><ul>
<li>
<p>0x80000 番地で無限ループをしていることが分かる</p>
</li>
<li>
<p>それ以外の命令で何をしているのかが分からない</p>
<ul>
<li>Raspberry Pi 3B+ に搭載された SoC は4コア構成なので，使わないコアも（0x30C-0x314 番地で）無限ループしている？</li>
</ul>
</li>
<li>
<p>分からないところがかなりあるが，進めていくうちに分かるかもしれない</p>
</li>
<li>
<p>とりあえず次に進もう</p>
</li>
</ul>
]]></content></item><item><title>Electron-Shogi &amp; 水匠5 on Manjaro</title><link>https://Kenta11.github.io/posts/2023-01-01-shogi-on-manjaro/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0900</pubDate><guid>https://Kenta11.github.io/posts/2023-01-01-shogi-on-manjaro/</guid><description>&amp;lt;no value&amp;gt;</description><content type="text/html" mode="escaped"><![CDATA[<h2 id="はじめに">はじめに<a href="#%e3%81%af%e3%81%98%e3%82%81%e3%81%ab" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>うちには強いマシンが Manjaro サーバしかないので，将棋の解析をこのサーバでやりたい．
ただし，いわゆる将棋ソフトは Windows で使うことを前提としているので，Manjaro なんていう変な環境でトライした人はいなさそうだ．
突貫工事ではあるが，Manjaro のデスクトップ環境で将棋の解析ができる環境を作ったので，その手順を記録しておく．</p>
<p>年の瀬になにやってんだ．</p>
<p><img src="shogi-on-manjaro.png" alt="Electron 将棋" title="Electron 将棋 と 水匠5 で解析している様子"></p>
<h2 id="1-uielectron-将棋をインストール">1. UI（Electron 将棋）をインストール<a href="#1-uielectron-%e5%b0%86%e6%a3%8b%e3%82%92%e3%82%a4%e3%83%b3%e3%82%b9%e3%83%88%e3%83%bc%e3%83%ab" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>まず Electron 将棋 の公式リポジトリからプロジェクト一式をダウンロードする．npm でビルドし，生成された実行バイナリを <code>~/.local/bin/</code> に配置する．npm 系のコマンドは既にインストールしていたので，環境によっては準備が必要かもしれない．</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ gh repo clone https://github.com/sunfish-shogi/electron-shogi
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> electron-shogi
</span></span><span class="line"><span class="cl">$ git checkout v1.3.0 <span class="c1"># 安定版が v1.3.0 らしい</span>
</span></span><span class="line"><span class="cl">$ npm install @vue/cli @vue/cli-service-global
</span></span><span class="line"><span class="cl">$ npm run electron:build
</span></span><span class="line"><span class="cl">$ find . -name <span class="s1">&#39;ElectronShogi*&#39;</span>
</span></span><span class="line"><span class="cl">./dist_electron/ElectronShogi-1.3.0.AppImage
</span></span><span class="line"><span class="cl">$ cp <span class="k">$(</span>find . -name <span class="s1">&#39;ElectronShogi*&#39;</span><span class="k">)</span> ~/.local/bin/
</span></span></code></pre></div><h2 id="2-エンジンyaneuraouをインストール">2. エンジン（YaneuraOu）をインストール<a href="#2-%e3%82%a8%e3%83%b3%e3%82%b8%e3%83%b3yaneuraou%e3%82%92%e3%82%a4%e3%83%b3%e3%82%b9%e3%83%88%e3%83%bc%e3%83%ab" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>こちらもまずは YaneuraOu の公式リポジトリからプロジェクト一式をダウンロードする．Makefile の設定を環境に合わせて編集し，コンパイルを実施する．
Manjaro サーバの CPU は Ryzen 7 3700X なので，TARGET_CPU は ZEN2 とした．</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ gh repo clone https://github.com/Kenta11/YaneuraOu
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> YaneuraOu/source
</span></span><span class="line"><span class="cl">$ vim Makefile <span class="c1"># 今回は TARGET_CPU を AVX2 から ZEN2 に変更</span>
</span></span><span class="line"><span class="cl">$ make <span class="c1"># 並列オプション -j を使うとコケたぞ</span>
</span></span><span class="line"><span class="cl">$ find . -name YaneuraOu-by-gcc
</span></span><span class="line"><span class="cl">./YaneuraOu-by-gcc
</span></span></code></pre></div><h2 id="3-評価関数水匠5をインストール">3. 評価関数（水匠5）をインストール<a href="#3-%e8%a9%95%e4%be%a1%e9%96%a2%e6%95%b0%e6%b0%b4%e5%8c%a05%e3%82%92%e3%82%a4%e3%83%b3%e3%82%b9%e3%83%88%e3%83%bc%e3%83%ab" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>水匠5 の評価関数をダウンロードする．YaneuraOu の実行バイナリがあるディレクトリ下の <code>eval</code> ディレクトリに <code>nn.bin</code> を配置する．</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ gh repo clone https://github.com/HiraokaTakuya/get_suisho5_nn
</span></span><span class="line"><span class="cl">$ cp get_suisho5_nn/nn.bin /path/to/YaneuraOu/source/eval/
</span></span></code></pre></div><h2 id="4-ui-からエンジンを選択">4. UI からエンジンを選択<a href="#4-ui-%e3%81%8b%e3%82%89%e3%82%a8%e3%83%b3%e3%82%b8%e3%83%b3%e3%82%92%e9%81%b8%e6%8a%9e" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<ul>
<li><code>electron-shogi</code> を実行</li>
<li>&ldquo;設定&rdquo;&gt;&ldquo;エンジン設定&rdquo; を選択し，エンジン（YaneuraOu）を選択</li>
<li>&ldquo;検討&rdquo;&gt;&ldquo;検討開始&rdquo; で局面を解析できる</li>
</ul>
<h2 id="おわりに">おわりに<a href="#%e3%81%8a%e3%82%8f%e3%82%8a%e3%81%ab" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>将棋の局面の解析が自宅マシンでできるようになった．
以上の方法で構築した環境がベストなのかは分からないが，少なくともプロ棋士が使うような解析環境は必要ないので，これで満足だ．</p>
]]></content></item></channel></rss>